fs     = require \fs
coco   = require \coco
stylus = require \stylus
nib    = require \nib

ls = -> "#it/#file" for file of fs.readdirSync it

flatten = -> Array::concat.apply [], it # shallow flatten

join = -> flatten @@ .join \\n
read = -> fs.readFileSync it, \utf8
compile = (it, options) ->
  try
    coco.compile do
      read it
      options
  catch
    throw new Error "Compiling #it:\n\t#{e.message}"

compile-all = ->
  for ls it => compile & # check for errors
  try
    coco.compile join do
      for ls it => read &
  catch
    throw new Error "Compiling #it:\n\t#{e.message}"

stylus.nib = -> stylus it .use nib!

outfile = \html5chan.user.js
metadata = read \metadata.txt

task \build 'build userscript' ->
  err, css <-! stylus.nib read(\css/hakase.styl) .render
  try
    throw err if err
    fs.writeFileSync do
      outfile
      join do
        metadata
        '(function(){' # IIFE wrapper
        '"use strict";'
        compile \src/intro.co
        compile-all \src/utils
        compile-all \src/classes
        compile \src/parser.co
        compile \src/enhancer.co
        compile \src/updater.co
        compile \src/poster.co
        try
          coco.compile do
            read \src/onready.co
              .replace /%hakase\.css%/ css
              .replace /%board\.co\.html%/ read \templates/board.co.html
        catch
          throw new Error "Compiling onready.co:\n\t#{e.message}"
        compile-all \src/features
        compile \src/outro.co
        '}.call(this))'
    console.log "compiled script to #{outfile}"
  catch
    console.error e.message

debounce = (delay, fn) ->
  var timeout
  !->
    ctx = this
    args = arguments
    clearTimeout timeout
    timeout := setTimeout do
      !-> fn.apply ctx, args
      delay

task \watch 'watch for changes and rebuild automatically' ->
  invoke \build
  for it of <[css src templates src/features src/classes src/utils]>
    fs.watch it, interval: 1000, debounce 1000 (event, filename) ->
      console.log "#event event detected on #filename. rebuilding..."
      invoke \build
