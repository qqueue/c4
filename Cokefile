fs       = require \fs
coco     = require \coco
stylus   = require \stylus
{cjsify} = require \commonjs-everywhere
esprima  = require \esprima
lodash   = require \lodash

flatten = -> Array::concat.apply [], it # shallow flatten

join = -> flatten @@ .join \\n
read = -> fs.readFileSync it, \utf8

nib = -> stylus it .use require(\nib)!

compile-css = ->
  # ordering of files matters
  files = <[base yotsuba-colors page post postform thread youtube]>
  source = (for files => read "style/#&.styl")join \\n
  # TODO use @import statements instead of ordering, if stylus will
  # compile them out.
  nib source .render!

outfile = \html5chan.user.js
metadata = read \metadata.txt

task \build 'build userscript' ->
  try
    console.time "Total build time"
    board-template = read \templates/board.co.html
    css = compile-css!

    console.time "Commonjsification"

    coco-time = 0
    esprima-time = 0
    ast = cjsify \src/html5chan.co __dirname,
      export: \html5chan
      handlers: \.co : (it, filename) ->

        c = Date.now! # TODO find better node timing libraries
        js = coco.compile do
          # XXX there should be a better way to build in CSS into userscripts,
          # but I don't have much excuse for the .co.html thing. Someday, jade...
          it.toString!
            .replace /%hakase\.css%/ css
            .replace /%board\.co\.html%/ board-template
          {+bare, filename} # because modules
        coco-time += Date.now! - c

        c = Date.now!
        ast = esprima.parse js
        esprima-time += Date.now! - c

        ast

    console.timeEnd "Commonjsification"
    console.log "Coco compilation: #{coco-time}ms"
    console.log "JS reparsing: #{esprima-time}ms"

    console.time "AST->JS source generation"
    # TODO something with sourcemap, when fire(fox|bug) gets support
    gen = require \escodegen .generate ast
    console.timeEnd "AST->JS source generation"

    fs.writeFileSync do
      outfile
      join do
        metadata
        "(function(){"
        '"use strict";'
        gen
        "}).call(this)"
    console.timeEnd "Total build time"
    console.log "compiled script to #{outfile}"
  catch
    console.error e.message

# lodash, but with superior arguments order
debounce = (wait, fn) -> lodash.debounce fn, wait

task \watch 'watch for changes and rebuild automatically' ->
  invoke \build
  for it of <[style src templates src/features src/classes src/utils]>
    fs.watch it, interval: 1000, debounce 1000 !(event, filename) ->
      console.log "#event event detected on #filename. rebuilding..."
      invoke \build

