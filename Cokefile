fs       = require \fs
coco     = require \coco
stylus   = require \stylus
{cjsify} = require \commonjs-everywhere
esprima  = require \esprima
lodash   = require \lodash

flatten = -> Array::concat.apply [], it # shallow flatten

join = -> flatten @@ .join \\n
read = -> fs.readFileSync it, \utf8

nib = (it, filename) ->
  stylus it, {filename, paths: ["#{__dirname}/style"]} .use require(\nib)!

outfile = \html5chan.user.js

task \build 'build userscript' ->
  try
    metadata = read \metadata.txt

    console.time "Total build time"

    console.time "Commonjsification"

    coco-time = 0
    esprima-time = 0
    ast = cjsify \src/html5chan.co __dirname,
      export: \html5chan
      handlers:
        \.co : (it, filename) ->
          c = Date.now! # TODO find better node timing libraries
          js = coco.compile it.toString!, {+bare, filename}
          coco-time += Date.now! - c

          c = Date.now!
          ast = esprima.parse js
          esprima-time += Date.now! - c

          ast

        # string interp template
        # XXX fix duplication with .co somehow
        # XXX cjsify doesn't support multipart filenames e.g. .co.html
        \.cohtml : (it, filename) ->
          c = Date.now! # TODO find better node timing libraries
          js = coco.compile it.toString!, {+bare, filename}
          coco-time += Date.now! - c

          c = Date.now!
          ast = esprima.parse js
          esprima-time += Date.now! - c

          ast

        \.styl : (it, filename) ->
          console.time "Stylus"
          css = nib it.toString!, filename .render!
          console.timeEnd "Stylus"

          src = "module.exports = '#{css.replace /'/g "\/'" .replace /\n/g '\\n'}'"

          # TODO emit AST node for this rather than esprima a string, since
          # it's so simple
          c = Date.now!
          ast = esprima.parse src
          esprima-time += Date.now! - c

          ast

    console.timeEnd "Commonjsification"
    console.log "Coco compilation: #{coco-time}ms"
    console.log "JS reparsing: #{esprima-time}ms"

    console.time "AST->JS source generation"
    # TODO something with sourcemap, when fire(fox|bug) gets support
    gen = require \escodegen .generate ast
    console.timeEnd "AST->JS source generation"

    fs.writeFileSync do
      outfile
      join do
        metadata
        "(function(){"
        '"use strict";'
        gen
        "}).call(this)"
    console.timeEnd "Total build time"
    console.log "compiled script to #{outfile}"
  catch
    console.error e
    console.error e.stack

const times = 50 # XXX figure out Cokefile's batty options parsing

task \profile 'build project over and over for profile tick collection' !->
  console.log "Running build #times times..."
  for i til times
    console.log "run #i"
    invoke \build

# lodash, but with superior arguments order
debounce = (wait, fn) -> lodash.debounce fn, wait

task \watch 'watch for changes and rebuild automatically' ->
  invoke \build
  for it of <[style src templates src/features src/classes src/utils]>
    fs.watch it, interval: 1000, debounce 1000 !(event, filename) ->
      console.log "#event event detected on #filename. rebuilding..."
      invoke \build

