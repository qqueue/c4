stylus = require \stylus
nib    = do require \nib
time   = require \./lib/sand
fs     = require \fs
cjs    = require \commonjs-everywhere

flatten = -> Array::concat.apply [], it # shallow flatten
join = -> flatten @@ .join \\n

cache = {}
processed = {}
entry-point = \src/c4.co
last-changed = entry-point

coco     = time.as \Coco     require(\coco)~compile
nephrite = time.as \Nephrite require(\nephrite)
styl     = time.as \Stylus   (it, filename) ->
  stylus it, {filename, paths: ["#{__dirname}/style"]} .use nib .render!

js-to-ast = time.as 'JS->AST' require(\esprima)~parse
ast-to-js = time.as 'AST->JS' require(\escodegen)~generate

traverseDependenciesSync = time.as 'CJSify compile',
  minus: [coco, nephrite, styl, js-to-ast],
  cjs~traverseDependenciesSync

bundle = time.as 'CJSify bundle' cjs~bundle

handler = (compile) -> -> js-to-ast compile ...

cjs-options =
  node: false
  cache: cache
  handlers:
    \.co   : handler (it, filename) ->
      coco it.toString!, {+bare, filename}

    \.ne   : handler (it, filename) ->
      src = nephrite it.toString!, filename
      coco src, {+bare, filename}

    \.styl : handler (it, filename) ->
      "module.exports = '#{styl it.toString!, filename
                             .replace /'/g "\/'" .replace /\n/g '\\n'}'"

outfile = \c4.user.js

task \build 'build userscript' time.as \Total !->
  try
    time.restart-all!

    metadata = slurp \metadata.txt

    new-deps = traverseDependenciesSync last-changed, __dirname, cjs-options
    processed[file] = new-deps[file] for file in new-deps

    ast = bundle processed, entry-point, __dirname, cjs-options

    # TODO something with sourcemap, when fire(fox|bug) gets support
    gen = ast-to-js ast

    spit do
      outfile
      join do
        metadata
        "(function(){"
        '"use strict";'
        # XXX hack to invalidate cached data in html5 storage when code changes
        "var c4_COMPILATION_VERSION = #{Math.random!};"
        gen
        "}).call(this)"

    time.end do
      "JS->AST"
      "Coco"
      "Nephrite"
      "Stylus"
      "CJSify compile"
      "CJSify bundle"
      "AST->JS"
      "Total"

    say "#{new Date}: compiled script to #{outfile}"
  catch
    console.error e
    console.error e.stack

debounce-leading = (delay, fn) ->
  var timeout
  reset = !-> timeout := null
  -> unless timeout
    fn ...
    timeout := setTimeout reset, delay

task \watch 'watch for changes and rebuild automatically' ->
  invoke \build

  require(\gaze) do
    <[ metadata.txt src/**/* style/**/* templates/**/* ]>
    debounce-delay: 2000ms # yeah, this doesn't work
    !->
      say "watching for changes..."

      @on \all debounce-leading 1000ms !(event, filepath) ->
        # XXX for some reason I'm getting extraneous 'added' events on 
        # directories, so guard against those
        if fs.statSync filepath .isFile!
          last-changed := filepath
        else
          # no actual changes we can use with the caching system
          return

        say "#event event detected on #filepath. rebuilding..."

        # XXX styl's internal @include mechanism means only c4.styl is
        # invalidated if it changes, so hack around this
        if /styl/.test filepath
          last-changed := "#__dirname/style/c4.styl"
          Object.keys cache .filter /styl/~test .forEach !->
            delete cache[it]

        invoke \build
