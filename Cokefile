coco     = require \coco
stylus   = require \stylus
{cjsify} = require \commonjs-everywhere
esprima  = require \esprima
lodash   = require \lodash
jadeco-to-jade = require \./jadeco-to-jade

flatten = -> Array::concat.apply [], it # shallow flatten
join = -> flatten @@ .join \\n

# sexy (arguably) AOP/traditional-style time metrics
time = let names = {}, last = {}
  of: (it, pad = it.length) -> "#{it + ' ' * (pad - it.length)} : #{names[it]}ms"
  end: !->
    if @@length > 1
      pad = Math.max.apply Math, (for @@ => &length)
      for @@
        time.stop &; say @of &, pad
    else
      time.stop it; say @of it
  start: !->
    names[it] ?= 0
    last[it] = Date.now!
  stop: !->
    if last[it]
      names[it] += Date.now! - last[it]
      delete last[it]
  as: (name, fn) -> ->
    time.start name
    ret = fn ...
    time.stop name
    ret
  restart-all: !-> names := {}

nib = time.as 'Stylus compilation' (it, filename) ->
  stylus it, {filename, paths: ["#{__dirname}/style"]} .use require(\nib)! .render!

compile-coco = time.as 'Coco compilation' coco.~compile
parse-js = time.as 'Reparse JS' esprima.~parse

coco-to-js = (it, filename) ->
  src = compile-coco it.toString!, {+bare, filename}
  parse-js src

cojade = (it, filename) ->
  say "---GO #filename ---------"
  src = jadeco-to-jade.compile it.toString!, filename
  say src
  say '-------------'
  src = compile-coco src, {+bare, filename}
  say src
  say '---------NEXT--------'
  parse-js src

ast-to-js = time.as 'AST->JS' require(\escodegen)~generate

outfile = \html5chan.user.js

task \build 'build userscript' ->
  try
    time.restart-all!

    time.start "Total build time"

    metadata = slurp \metadata.txt

    time.start "Commonjsification"

    ast = cjsify \src/html5chan.co __dirname,
      export: \html5chan
      handlers:
        \.co : coco-to-js
        # string interp template
        # XXX cjsify doesn't support multipart filenames e.g. .co.html
        \.cojade : cojade
        \.styl : (it, filename) ->
          src = "module.exports = '#{nib it.toString!, filename
            .replace /'/g "\/'" .replace /\n/g '\\n'}'"
          parse-js src

    time.stop "Commonjsification"

    # TODO something with sourcemap, when fire(fox|bug) gets support
    gen = ast-to-js ast

    spit do
      outfile
      join do
        metadata
        "(function(){"
        '"use strict";'
        gen
        "}).call(this)"

    time.end do
      "Commonjsification"
      "Reparse JS"
      "Coco compilation"
      "Stylus compilation"
      "AST->JS"
      "Total build time"

    say "#{new Date}: compiled script to #{outfile}"
  catch
    console.error e
    console.error e.stack

const times = 50 # XXX figure out Cokefile's batty options parsing

task \profile 'build project over and over for profile tick collection' !->
  say "Running build #times times..."
  for i til times
    say "run #i"
    invoke \build

# lodash, but with superior arguments order
debounce = (wait, fn) -> lodash.debounce fn, wait

task \watch 'watch for changes and rebuild automatically' ->
  invoke \build
  for <[style src templates src/features src/utils]>
    fs.watch &, interval: 1000, debounce 1000 !(event, filename) ->
      say "#event event detected on #filename. rebuilding..."
      invoke \build

