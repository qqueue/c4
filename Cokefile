fs = require \fs
coco = require \coco
stylus = require \stylus
_ = require \underscore

ls = -> # appends relative path to readdir paths, and skip .swp files
	"#it/#file" unless /.swp$/.test file for file of fs.readdirSync it
join = -> _.flatten @@ .join \\n
read = -> fs.readFileSync it, \utf8
compile = -> coco.compile read it
bare = -> coco.compile read(it), bare: true

outfile = \html5chan@httpsgithubcomqueue-html5chan.user.js
metadata = read \metadata.txt

task \build 'build userscript' ->
	err, css <- stylus.render read(\css/hakase.styl) # sexy coco flattened callback
	try
		throw err if err
		fs.writeFileSync do
			outfile
			join do
				metadata
				bare \src/intro.co
				bare \src/utils.co
				bare klass for klass of ls \src/classes
				compile \src/enhancer.co
				compile \src/parser.co
				coco.compile do
					read \src/onready.co 
						.replace /%hakase\.css%/ css 
						.replace /%board\.co\.html%/ read \templates/board.co.html
					bare: true # since it's all in a callback
				compile feature for feature of ls \src/features
				bare \src/outro.co
		console.log "compiled script to #{outfile}"
	catch e
		console.error e
				
task \watch 'watch for changes and rebuild automatically' ->
	invoke \build
	<[css src]>.forEach ->
		fs.watch it, interval: 1000, _.debounce do
			(event, filename) ->
				unless /.swp$/.test filename # goddamn vi
					console.log "#event event detected on #filename. rebuilding..."
					invoke \build
			1000
