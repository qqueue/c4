# chainable wrapper for addEventListener
export listen = class
  (@element) ~>

  on: (event, handler) ->
    @element?addEventListener event, handler
    return this

  # attach a handler that will be removed after it runs
  once: (event, handler) ->
    @element?addEventListener event, function once ({target}: e)
      @removeEventListener event, once
      handler ...
    return this

  off: (event, handler) ->
    @element?removeEventListener event, handler
    return this

  # handle space separated events
  <[on once off]>forEach !(method) ->
    original = ::[method]
    ::[method] = (event, handler) ->
      for event / ' ' => original.call this, &, handler
      return this

  # jQuery-like shortcuts for some common handlers
  <[click mouseover scroll]>forEach !(e) ->
    ::[e] = (selector, handler) -> @on e, selector, handler

