# show a tooltip for a given element only after the user mouses over and keeps
# the mouse still for a short delay. remove the tooltip if the mouse moves
# outside a small deadzone. This is similar to how title tooltips interact in
# firefox, but for arbitrary content.
const delay       = 200ms
const dead-zone   = 10px

const leave-delay = 25ms

listen = require \./listen

# a function suitable for attachment to a 'mouseover' event that
# handles tooltip-like behavior according to mouse movement over an element.
#
# the `show` fn is called, with the element as context and the last mousemove
# or mouseover event object as an argument, when the tooltip should be shown.
#
# the `hide` fn is called with the same context and arguments when the
# tooltip content should be removed from view.
export tooltip = ({show, hide}) ->
  # XXX the unclutter program on linux will trigger a
  # mouseout event immediately followed by a mouseover when
  # the cursor disappears, causing the tooltip to destroy itself.
  # Thus, don't immediately hide tooltip on mouseleave, and
  # prevent the subsequent mouseover from duplicating the timeout
  # by keeping track of tooltipped elements and
  # a timeout reference until `delay` after mouseout.
  active-elements = new WeakMap # Element -> Timeout

  !({clientX: x, clientY: y}: e) ->
    #console.debug 'mouseover!'
    var timeout
    last-event = e
    el = this
    #console.debug el
    li = listen el

    # called when user hasn't moved mouse for 'delay' seconds
    create-tooltip = !->
      #console.debug 'creating tooltip!'
      show.call el, last-event

      # swap creation for destruction
      li
        .off \mousemove reset-timeout
        .on \mousemove remove-tooltip

    # mousemove handler when tooltip is hidden but mouse is over element, to
    # ensure tooltip is only shown after 'delay' seconds of no movement
    reset-timeout = !(e) ->
      #console.debug 'reset timeout'
      clearTimeout timeout
      timeout := setTimeout create-tooltip, delay

      # store the new current mouse position
      {clientX: x, clientY: y} := e

      last-event := e

    # mousemove handler when tooltip is shown, to remove tooltip when mouse is
    # moved outside the deadzone. The deadzone ensures the tooltip doesn't get
    # removed by accidental small mouse movements, only intentional movements.
    remove-tooltip = !({clientX: cx, clientY: cy}) ->
      #console.debug 'remove tooltip, maybe'
      if Math.abs(x - cx) > dead-zone or Math.abs(y - cy) > dead-zone
        #console.debug 'removing tooltip!'
        hide ...

        # restart tooltip timeout, just in case user doesn't move mouse after
        # reaching the deadzone, which would trigger reset-timeout.
        timeout := setTimeout create-tooltip, delay

        # swap destruction for creation
        li
          .on \mousemove reset-timeout
          .off \mousemove remove-tooltip

    cleanup = !->
      #console.debug 'cleaning up!'
      # clean up tooltip and handlers
      hide ...

      clearTimeout timeout
      li
        .off \mousemove reset-timeout
        .off \mousemove remove-tooltip
        .off \mouseout maybe-cleanup

      # we're finally out, clear active
      active-elements.delete el

    maybe-cleanup = !(e) ->
      #console.debug 'mouseout, maybe cleaning up...'
      # cancel any other leave timeout and count down
      # to actual cleanup
      clearTimeout active-elements.get el
      active-elements.set el, setTimeout do
        !->
          #console.debug 'leave timeout done!'
          cleanup.call el, e
        leave-delay

    if active-elements.has el
      #console.debug 'we\'re still active, clearing leave timeout...'
      # we're back, don't go away
      clearTimeout active-elements.get el
    else # register handlers
      #console.debug 'not currently active, registering'
      active-elements.set el, void
      timeout = setTimeout create-tooltip, delay

      listen this
        .on \mousemove reset-timeout
        .on \mouseout maybe-cleanup
