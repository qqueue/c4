# coffeekup-like dom builder
# pretty fuckin magical
class ElementProxy
  (parent, tag, attributes, content) ->
    # lots of fancy optional argument logic, thanks javascript
    # TODO document this shit
    @el = if typeof tag is \string
      document.createElement tag
    else # no tag specified, so shift arguments backwards
      attributes = tag
      content = attributes
      document.createDocumentFragment!
    parent.el.appendChild @el if parent
    # handle either extended attributes,
    # or a string of text
    if typeof attributes is \string
      @el.textContent = attributes
    else if typeof attributes is \object
      @el <<< attributes
    else
      content = attributes
    if content?
      if typeof content is \function
        content.call this
      else
        @el.textContent = content


  tag: (tag, attributes, content) ->
    new ElementProxy this, tag, attributes, content

  # delegated to listen()
  on: (event, selector, handler) ->
    listen @el .on event, selector, handler
  off: (event, selector, handler) ->
    listen @el .off event, selector, handler

  # simple property copy for css
  css: -> @el.style <<< it

  # proxy common attributes, non-exhaustive
  <[
    id classList src href style width height textContent naturalWidth
    naturalHeight attributes
  ]>forEach (attr) ->
    Object.defineProperty ElementProxy.prototype, attr,
      get: -> @el[attr]
      set: -> @el[attr] = it

  # proxy common methods
  <[
    getAttribute
  ]>forEach (method) ->
    ElementProxy::[method] = -> @el[method].apply @el, @@

  # helpers for each kind of element
  # non-exhaustive, until I need them
  <[
    body div section header footer article hgroup h1 h2 a ol ul li span
    b i em strong img
  ]>forEach (tag) ->
    ElementProxy::[tag] = (attributes, content) ->
      new ElementProxy this, tag, attributes, content

export kup = (tag, attributes, content) ->
  new ElementProxy void, tag, attributes, content .el

