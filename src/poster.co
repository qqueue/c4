# fake ajax posting

postStatus = ->
	$ \post-status .textContent = it

<- onready

document.body.appendChild create \iframe ->
	@id = \postresponse
	@name = \postresponse
	@hidden = true

$ \postform .target = \postresponse


listen $ \buttons
	.on \click (e) ->
		captcha = $ \recaptcha_response_field
		file = $ \file
		comment = $ \comment
		email = $ \email

		# noko would load the thread into the iframe and break
		# sys.4chan.org posting a message back here
		email.value = '' if /^noko$/i.test email.value

		captcha.setCustomValidity unless captcha.value
			"You forgot the captcha!"
		else ''
		
		file.setCustomValidity if !file.value and board.isBoard
			"You forgot your image!"
		else ''

		comment.setCustomValidity if !file.value and !comment.value
			"You didn't enter a comment or select a file!"
		else ''

		if $ \postform .checkValidity!
			$ \post .disabled = true
			$ \sage .disabled = true
			postStatus "Posting..."

# the hidden iframe where the form submits to
# dumps its body back through postMessage
# which we can then parse here to determine the status of the post
# 
# this is similar to the approach 4chanx takes, but instead of 
# trying to pass all the formdata through postMessage, and
# have the iframe make the xhr for us, we just fake 
# a no-reload response by having the userscript also load on
# the sys.4chan.org result page and have it send us the response.
#
# Unfortunately this means we cant get progress events, so no fancy
# upload progress bar ;_;
listen window .on \message ({data}) ->
	html = create \div -> @innerHTML = data # reparse innerHTML
	console.log html

	captcha = $ \recaptcha_response_field
	file = $ \file
	comment = $ \comment

	$ \post .disabled = false
	$ \sage .disabled = false

	if /Post successful!|uploaded!/.test html.textContent
		postStatus 'Post successful!'
		# update and show new post, giving some time for 4chan to process it
		setTimeout updater.update, 3000
	
		captcha.value = ''
		# TODO figure out better way to reset captcha field
		$ \recaptcha_reload_btn .click!

		comment.value = ''

		# through the value of a file input is always '', you can still reset
		# the field by re-setting it to ''
		file.value = ''


	# TODO check for other errors
	else if /mistyped the verification/.test html.textContent
		postStatus 'You mistyped the verification!' 
		$ \recaptcha_reload_btn .click!
		captcha.value = ''
		captcha.focus!

# not really the best place for this, but oh well
# persist entered name and tripcode
listen $ \name .on \input ->
	set name: @value
$ \name .value = get \name or ''


