# fake ajax posting

postStatus = ->
	$ \post-status .textContent = it
#
# set .visible class on postform-wrapper when at the bottom of the screen
# so stylesheet can make it visible
# kinda stylesheet specific, oh well

# FIXME this logic sucks
visible = false # hold visible
showform = -> $ \postform-wrapper .classList.add \visible if bottom or visible
hideform = -> $ \postform-wrapper .classList.remove \visible unless bottom or visible

bottom = false # at the bottom of screen, set by scroller

<- onready

document.body.appendChild create \iframe ->
	@id = \postresponse
	@name = \postresponse
	@hidden = true

$ \postform .target = \postresponse

checkValidity = ->
	captcha = $ \recaptcha_response_field
	file = $ \file
	comment = $ \comment
	email = $ \email

	# noko would load the thread into the iframe and break
	# sys.4chan.org posting a message back here
	email.value = '' if /^noko$/i.test email.value

	captcha.setCustomValidity unless captcha.value
		"You forgot the captcha!"
	else ''
	
	file.setCustomValidity if !file.value and board.isBoard
		"You forgot your image!"
	else ''

	comment.setCustomValidity if !file.value and !comment.value
		"You didn't enter a comment or select a file!"
	else ''

	if $ \postform .checkValidity!
		$ \post .disabled = true
		$ \sage ?disabled = true
		
		visible := true
		showform! # make sure the form stays visible

		postStatus "Posting..."

listen $ \post .on \click checkValidity
listen $ \sage .on \click checkValidity

cooldown = ->
	post = $ \post
	sage = $ \sage
	post.disabled = true
	sage?disabled = true

	message = post.textContent

	tminus = 30sec
	post.textContent = tminus
	setTimeout do
		function tick
			if tminus-- is 0
				post.textContent = message
				post.disabled = false
				sage?disabled = false
			else
				post.textContent = tminus
				setTimeout tick, 1000ms
		1000ms

# the hidden iframe where the form submits to
# dumps its body back through postMessage
# which we can then parse here to determine the status of the post
# 
# this is similar to the approach 4chanx takes, but instead of 
# trying to pass all the formdata through postMessage, and
# have the iframe make the xhr for us, we just fake 
# a no-reload response by having the userscript also load on
# the sys.4chan.org result page and have it send us the response.
#
# Unfortunately this means we cant get progress events, so no fancy
# upload progress bar ;_;
#
# TODO handle new thread creation with redirect / open in new tab
listen window .on \message ({data}) ->
	html = create \div -> @innerHTML = data # reparse innerHTML
	console.log html

	captcha = $ \recaptcha_response_field
	file = $ \file
	comment = $ \comment

	$ \post .disabled = false
	$ \sage ?disabled = false

	if /Post successful!|uploaded!/.test html.textContent
		postStatus 'Post successful!'
		cooldown!
		
		visible := false # don't need to show form anymore
		hideform!

		$ \postform .reset!
		$ \name .value = get \name or '' # persist name
		$ \recaptcha_image .click! # refresh captcha ( can't call Recaptcha directly )

		# update and show new post, giving some time for 4chan to process it
		updater.countdown 3sec
	

	# TODO check for other errors
	else if /mistyped the verification/.test html.textContent
		postStatus 'You mistyped the verification!' 
		$ \recaptcha_image .click! # refresh captcha ( can't call Recaptcha directly )
		captcha.value = ''
		captcha.focus!
	else if /duplicate file entry detected/
		# TODO select for link to duplicate file
		$ \postform .reset!
		$ \name .value = get \name or '' # persist name
		$ \recaptcha_image .click! # refresh captcha ( can't call Recaptcha directly )

# persist entered name and tripcode
listen $ \name .on \input ->
	set name: @value
$ \name .value = get \name or ''

listen window .on \scroll ->
	y = window.scrollMaxY - window.scrollY
	if bottom := y < 100
		showform!
	else
		hideform!

# if form is focused, don't hide
$ \postform .addEventListener do
	\focus
	->
		visible := true
		showform!
	true # have to use capture for non-bubbling focus events

$ \postform .addEventListener do
	\blur
	->
		visible := false
		hideform!
	true # have to use capture for non-bubbling focus events
