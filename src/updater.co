# Keep threads up to date
#
# - append new posts as they are made
# - detect when new posts are read
#   - keep an unread counter in the favicon
# - allow the user to manually request an update
#
# TODO this code _deperately_ needs FRP or promises or some shit. 190 LOC is
# way too much.

listen = require \./utils/listen
{onready} = require \./utils/features
{defer, repeat} = require \./utils/timing
{$, $$, L} = require \./utils/dom
post-template = require \templates/post
parser = require \./parser
draw-favicon = require \./utils/favicon
new-updater = require \./new-updater

export updater = {}

# state
unread        = 0

!function append-new-posts thread, new-posts, deleted
  $ "t#{thread.op.no}" .lastElementChild # .replies
    .insertAdjacentHTML do
      \beforeend
      for new-posts
        post-template &, {thread, container: \article classes: 'new reply'}
      .join ''

  for new-posts
    # XXX update global post hash. still not great global state
    board.posts[&no] = &
    document.dispatchEvent new CustomEvent do
      \c4-postinsert
      detail: post: $ "p#{&no}"

!function update-favicon thread, new-posts, deleted
  unread += new-posts.length
  draw-favicon board.favicon, if unread > 0 then "#unread" else ''

!function read-posts-when-scrolled-to thread, new-posts, deleted
  for new-posts => fade-when-visible &

!function update-thread-stats thread, new-posts, deleted
  $ "t#{thread.op.no}" .querySelector ".thread-info" .textContent =
    "#{thread.replies.length} replies \
     and #{thread.imageReplies.length} image replies."

# TODO update event should govern above features too
!function dispatch-update-event thread, new-posts, deleted
  document.dispatchEvent new CustomEvent do
    \c4-update
    detail: {thread, new-posts}

!function smooth-scroll-to-bottom
  last = window.scrollY
  repeat 50ms {-auto} !->
    # unless user fights the scroll downwards
    unless window.scrollY < last
      if (remaining = window.scrollMaxY - window.scrollY) > 1
        window.scrollBy 0, 1 >? remaining / 4
        last := window.scrollY
        @repeat!

!function handle-new-posts thread, new-posts, deleted
  # if at the bottom of the page before adding new posts, smooth-scroll later
  if (window.scrollMaxY - window.scrollY) < 5 and not document.hidden
    scroll = true

  append-new-posts            thread, new-posts, deleted
  update-thread-stats         thread, new-posts, deleted
  update-favicon              thread, new-posts, deleted

  dispatch-update-event       thread, new-posts, deleted

  read-posts-when-scrolled-to thread, new-posts, deleted

  # if on the bottom of the page
  smooth-scroll-to-bottom! if scroll

fade = !(post) ->
  # running immediately seems to break CSS yellow fade.
   defer 100ms !->
    post.classList.remove \new
    --unread
    draw-favicon board.favicon, if unread > 0 then "#unread" else ''

fade-when-visible = !->
  post = $ "p#{it.no}"

  y = post.offsetTop

  if (window.innerHeight + window.scrollY) > y
    if document.hidden
      # fade them once the tab is visible again
      listen document .once \visibilitychange !-> fade post
    else
      # now
      fade post
  else
    # wait until scrolled to
    window.addEventListener \scroll function reset
      if ( window.innerHeight + window.scrollY ) > post.offsetTop
        fade post
        window.removeEventListener \scroll reset

onready !->
  if board.isThread and not board.thread.op.closed
    new-updater.add-event-listener \message !->
      switch it.data.type
      case \dead
        document.title += '(dead)'
      case \update 
        old-thread = board.thread

        thread = parser.api it.data.thread, board.name

        new-posts = thread.replies.filter -> not old-thread.post[it.no]
        deleted = old-thread.replies.filter -> not thread.post[it.no]

        handle-new-posts thread, new-posts, deleted

        # swap out old thread state with new
        board.thread = thread
    new-updater.postMessage do
      type: \register
      board-name: board.name
      thread-no: board.thread-no

