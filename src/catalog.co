{L, $$, $} = require \./utils/dom
{get, set, sset, sget} = require \./utils/storage
catalog-thread = require \templates/catalog-thread
{onready} = require \./utils/features
{catalog} = board

# inbox concept:
# when opening the catalog, you're most interested in what changed since you
# last looked at the catalog, rather than the full state of the board,
# similar to email inboxes that highlight unread messages. Unlike email, however,
# 4chan threads aren't direct correspondence, so marking every thread
# as "read" would be laborious. When you close the catalog page,
# you've probably glanced over everything and opened tabs for any
# threads actually interesting. Thus, assume that catalog loads
# are basically "mark everything as read", and calculate diffs from there.
#
# We can implement this simply by storing the last loaded state of the
# catalog, and showing the diff between that and current whenever the
# page is loaded. However, accidental reloads would then cause everything
# to be marked as read, with the only recovery being to reset read state
# to everything. To mitigate this, keep _every_ page load over time
# (truncated eventually) and allow the user to select the diff range
# over a timeline. If you accidentally reload, then you can just
# move the diff base back in time a bit to get a useful unread count.
# Plus, you can then see how much procrastination you've done on 4chan
# throughout the day.

indexedDB.open \catalogs 3
  &onerror = console.error
  &onupgradeneeded = ({target: {result: db}, oldVersion}: it) ->
    console.log "upgrade needed" it
    # nuke old store, it's not that important
    try
      db.deleteObjectStore \catalogs
    catch # NotFoundError
      console.error e
    db.createObjectStore \catalogs keyPath: [\board \mtime]
  &onsuccess = ({target: {result: db}}: it) ->
    console.log "opened" it
    called = false
    db.transaction [\catalogs] .objectStore \catalogs
      # all for this board
      # annoying that you can't partially specify the key
      # e.g. IDBKeyRange.only [board.name]
      # start latest first
      &openCursor IDBKeyRange.bound([board.name, 0], [board.name, Infinity]), \prev
        &onerror = console.error
        &onsuccess = ({target: {result: cursor}}) ->
          if cursor
            # if old catalog is completely disjoint, remove (no longer useful)
            old = cursor.value
            if disjoint-catalogs old, catalog
              db.transction [\catalogs] .objectStore \catalogs \
                .delete [old.board, old.mtime]
                &onerror = console.error
                &onsuccess = !->
                  console.log "truncated catalog" old

          unless called
            called := true
            catalogs-loaded db, cursor?value

          cursor?continue!

# run db fetch and onready in parallel
readyp = new Promise onready

!function catalogs-loaded db, last
  if not last? or (catalog.mtime - last.mtime) > 30s # debounce slightly
    db.transaction [\catalogs] \readwrite .objectStore \catalogs
      .add catalog <<< {board: board.name}
        &onerror = console.error
        &onsuccess = !->
          console.log "saved current state in db at mtime #{catalog.mtime}"

  <-! readyp.then

  # 4chan catalog features, since I'm clobbering desuwa's version
  for $$ \.order
    &addEventListener \change !->
      if @checked
        set \catalog-order @value
        # rerender
        $ \catalog .innerHTML = (for catalog.order[@value]
          catalog-thread catalog.threads[&], no: &
        )join ''

  set \catalog-order (order = get \catalog-order or \date)
  $ order .checked = true

  updated = []

  console.log \updating

  # simple display for now, just show reply diff
  for id, thread in catalog.threads
    if last?threads[id]
      lt = that
      diffr = thread.r - lt.r
      diffi = thread.i - lt.i
      if diffr > 0 or diffi > 0
        $ "c#id"
          &querySelector '.reply-count' .innerHTML =
            "R: #{thread.r} (<span class=diff>+#diffr</span>),
             I: #{thread.i} (<span class=diff>+#diffi</span>)"
          &classList.add \updated
        updated.push {thread.r, diffr, id}
    else # new, count everything as "updated"
      $ "c#id"
        &querySelector '.reply-count' .innerHTML =
          "R: #{thread.r} (<span class=diff>+#{thread.r}</span>),
           I: #{thread.i} (<span class=diff>+#{thread.i}</span>)"
        &classList.add \updated
      updated.push {thread.r, diffr: thread.r, id}

  # move updated threads to the top, sorted by number of updates
  # since we're doing insertBefore, this sort is actually reversed
  updated.sort chain-cmp do
    # number of updated threads, weighted by how big the thread
    # is already, e.g. a 20-reply thread with 10 new replies is
    # hotter than a 450-reply thread with 15 new replies.
    on-fn -> it.diffr / it.r
    # then by modification time
    on-fn -> it.mtime

  container = $ \catalog
  for thread of updated
    container.insertBefore do
      $ "c#{thread.id}"
      container.firstChild

# comparator sugar
on-fn = (fn) ->
  cmp = (a, b) ->
    fa = fn a; fb = fn b
    if fa > fb
      1
    else if fa < fb
      -1
    else
      0

# chain comparison functions, short-circuiting if not equal
chain-cmp = (...cmps) -> (a, b) ->
  for cmps
    res = & a, b
    return res if res is not 0
  return 0

function disjoint-catalogs a, b
  for id, thread in a.threads
    if b.threads[id]? and not b.threads[id].sticky
      return false
  return true
