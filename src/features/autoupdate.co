# inside closure, so this isn't global
timeout = null

features.autoupdate =
	on: ->
		if board.isThread
			timeout := setTimeout do
				function refresh
					with new XMLHttpRequest
						@open \get document.URL 
						@responseType = \document
						listen this 
							.on \load ->
								last_modified = new Date( @getResponseHeader \Last-Modified ).getTime!
								if last_modified > parser.last_parse
									console.log "update detected, parsing"
									{thread} = parser.yotsuba @response
									if thread.new.length > 0
										document.querySelector '#thread-' + thread.id + ' .replies'
											.insertAdjacentHTML do
												\beforeend
												render_all thread.new, \article, 'new reply'
										# refresh backlinks
										for backlinks of document.querySelectorAll '.thread .backlinks'
											backlinks.insertAdjacentHTML do
												\beforeend
												Post[backlinks.parentNode.id.split \- .pop!].backlinks true
										# redo rainbows
										# TODO think up better way to call dependant functions
										# have some sort of after_update hook
										features.rainbowize.on!
								timeout := setTimeout refresh, features.autoupdate.interval || 30000ms
							.on \error ->
								alert "couldn't refresh page!"
								console.log this
						@send!
				features.autoupdate.interval or 30000ms
	off: -> clearTimeout features.autoupdate.timeout
