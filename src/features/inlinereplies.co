# inline replies
{on-posts, onbacklink} = require \../utils/features
{DOM, $$, $, closest, classify, L} = require \../utils/dom
post-template = require \templates/post
{post: post-classes} = require \../utils/gen-class
{defer} = require \../utils/timing

# scroll! returns to the scroll position when
# markScroll! was last called
{markScroll, scroll} = let
  var last, el
  markScroll: ->
    el := it
    last := el.getBoundingClientRect!top
  scroll: ->
    window.scrollBy 0, el.getBoundingClientRect!top - last

toggle-off = !(link, inlined) ->
  no = link.hash.substring 2

  link.hidden = false

  markScroll link

  link.classList.remove \inlinedlink
  link.parentNode.classList.remove \inlinedquote

  # remove original post's inlined status if this is the last inlining
  # link
  if $$ ".inline[data-no=\"#no\"]" .length is 1
    $ "p#no" ?.classList.remove \inlined

  # and for nested posts
  for inlined.querySelectorAll '.post.inline'
    pid = (&no / \-)pop!
    if $$ ".inline[data-no=\"#pid\"]" .length is 1
      $ "p#pid" ?.classList.remove \inlined

  inlined.remove!

  # unhide forcedquote for quotelinks
  # XXX messy
  if link.nextElementSibling
    if that.classList.contains \forcedquote \
    or that.classList.contains \forcedimage
      link.nextElementSibling.hidden = false
    if link.nextElementSibling.nextElementSibling
      if that.classList.contains \forcedquote
        link.nextElementSibling.nextElementSibling.hidden = false

  scroll!

onclick = !(e) ->
  return if e.altKey or e.ctrlKey or e.shiftKey or e.metaKey
  return unless post = board.posts[no = @hash.substring 2]
  e.preventDefault!

  host = closest \.post, this .id
  hostid = (host / \-)pop! # grab last (if nested inline post)
  inlined-id = "#{host}-p#no" # id is unique to hosting post and inlined post
  stub-id = "#{no}-inlined-stub"

  if inlined = $ inlined-id
    toggle-off this, inlined
  else # create
    is-backlink = @classList.contains \backlink
    inlined = DOM post-template post, \article "inline hovered" post-classes, inlined-id
    # walk outside of inline elements like spoilers and greentext
    wrapper = this
    while wrapper.parentElement.matchesSelector 'a,span'
      wrapper.=parentElement

    markScroll this

    # insert post in "natural" reading order
    wrapper[if is-backlink then \after else \before] inlined

    if is-backlink
      # prepend backlink number element (instead of pseudo element) that will
      # remove inlined post on click
      inlined.prepend with L \a
        &textContent = post.idx
        &className = \inlined-idx
        &addEventListener \click !~> toggle-off this, inlined

      this.hidden = true # don't need two links

    document.dispatchEvent new CustomEvent do
      \html5chan-postinsert
      detail: {post: inlined}

    # replace matching reply links
    # done after postinsert so quote-replies will work
    for inlined.querySelectorAll "a.quotelink[href$=\"#hostid\"]"
      &className = \recursivelink
      &removeAttribute \href

    # remove unecessary first quote (implied by nesting) if it's the only one
    inlined.querySelector \.comment
      if &querySelectorAll \.quotelink .length is 0
        &firstElementChild
          if &?className is \recursivelink
            # clear out redundant space
            while &nextSibling?tagName is \BR \
               or &nextSibling?classList?contains \forcedquote \
               or &nextSibling?classList?contains \forcedimage
              &nextSibling.remove!
            &remove!

    @classList.add \inlinedlink
    @parentNode.classList.add \inlinedquote

    $ \postpreview ?.remove!

    $ "p#no" ?.classList.add \inlined

    # hide unnecessary forcedquote for quotelinks
    # XXX messy
    unless is-backlink
      if @nextElementSibling
        if that.classList.contains \forcedquote \
        or that.classList.contains \forcedimage
          @nextElementSibling.hidden = true
        if @nextElementSibling.nextElementSibling
          if that.classList.contains \forcedquote
            @nextElementSibling.nextElementSibling.hidden = true

    scroll! unless is-backlink # since backlink got hidden

follow = !-> window.location.hash = that if @hash # actually follow link

on-posts '.quotelink:not(.hiddenlink)':
  click:    onclick
  dblclick: follow

onbacklink !->
  it.detail.backlink
    &addEventListener \click onclick
    &addEventListener \dblclick follow

