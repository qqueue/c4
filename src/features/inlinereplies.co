# inline replies
# with lots of delicious messy logic to ensure
# mouse position is maintained

# scroll! returns to the scroll position when
# markScroll! was last called
{markScroll, scroll} = do ->
	el = null
	last = {}
	markScroll: -> 
		el := it
		last{offsetLeft, offsetTop} = el
	scroll: -> window.scrollBy el.offsetLeft - last.offsetLeft, el.offsetTop - last.offsetTop

# if any of el's parent elements are parent
isParentOf = (el, parent) ->
	while el.=parentElement
		return true if el is parent
	false

toggle = (e) ->
	if post = Post[id = @hash.substring 1]
		host = closest \.post, this .id
		hostid = host.split \- .pop! # grab last (if nested inline post)
		inlined_id = "#host-#id" # id is unique to hosting post and inlined post
		stub_id = "#{post.id}-inlined-stub"
		if inlined = $ inlined_id # toggle off

			markScroll this

			@classList.remove \inlinedlink
			# remove original post's inlined status if this is the last inlining link
			if $$ ".inline.post#{post.id}" .length is 1
				$ post.id .classList.remove \inlined

			# and for nested posts
			for p of inlined.querySelectorAll '.post.inline'
				id = p.id.split \- .pop!
				if $$ ".inline.post#id" .length is 1
					$ id .classList.remove \inlined

			remove inlined

			scroll!

		else # create
			inlined = post.element \article "inline hovered" inlined_id

			for link of inlined.querySelectorAll "a.quotelink[href$=\"##hostid\"]" # replace matching reply link
				link.outerHTML = """<strong class="recursivelink">#{link.innerHTML}</strong>"""

			wrapper = this # walk outside of inline elements like spoilers and greentext
			wrapper.=parentElement while wrapper.parentElement[matchesSelector] 'a,span,font'

			markScroll this

			if @classList.contains \backlink
				insertAfter wrapper, inlined
			else
				insertBefore wrapper, inlined
			@classList.add \inlinedlink

			remove $ \postpreview

			$ post.id .classList.add \inlined

			scroll!
						
		return false


# TODO add button to uninline all posts

bypass = -> # bypass inline replies on dblclick
	window.location.hash = that if @hash  # actually follow link

<- onready

listen $ \threads
	.on \click 'a.quotelink:not(.hiddenlink)' toggle
	.on \dblclick \a.quotelink bypass
