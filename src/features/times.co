# update relative post times periodically

# each time element adds itself to the stale list once it becomes inaccurate.
# the stale list is flushed and stale times are updated whenever the DOM
# changes otherwise, which keeps the times as up to date as possible without
# incurring separate DOM reflows.
stale = []

const DAY = 8_640_000ms, HOUR = 3_600_000ms, MINUTE = 60_000ms, SECOND = 1000ms

debounce-leading = (delay, fn) ->
  var timeout
  reset = !-> timeout := null
  -> unless timeout
    fn ...
    timeout := defer delay, reset 

flush = debounce-leading SECOND, !->
  for stale
    time = new Date(&getAttribute \datetime)
    &textContent = time.relative-time!
    set-update &

  stale.length = 0

set-update = !(el) ->
  time = new Date(el.getAttribute \datetime)
  # calculate when relative date will be stale again
  diff = Date.now! - time.getTime!
  delay = if diff > DAY
    diff % DAY
  else if diff > HOUR
    diff % HOUR
  else if diff > MINUTE
    diff % MINUTE
  else
    SECOND

  # add self to stale list then
  defer delay, !-> stale.push el

onpostinsert !->
  set-update it.detail.post.querySelector \time

  # take advantage of DOM reflow
  flush!

# flush when user switches back to the tab
window.addEventListener \visibilitystatechange ->
  flush unless document.hidden

