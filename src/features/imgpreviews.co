# show a centered image preview when hovering over an image after a short
# delay, and only remove it after the mouse moves out of the dead zone this is
# similar to how tooltips are handled in firefox.
delay = 200ms
dead_zone = 10px

<-! onready

listen $ \threads .mouseover 'img.thumb' !({clientX: x, clientY: y}) ->
  $ \imgpreview ?.remove!

  width = @parentElement.getAttribute \data-width
  height = @parentElement.getAttribute \data-height
  src = @parentElement.href

  # http://code.google.com/p/doctype-mirror/wiki/ArticleViewportSize
  # size of viewport excluding scrollbars
  docheight = document.documentElement.clientHeight - 20
  docwidth = document.documentElement.clientWidth - 20

  ratio = Math.min 1, docheight/height, docwidth/width
  width *= ratio
  height *= ratio

  l = $ \lightbox

  var timeout
  # until the image is displayed, continually reset
  # timeout on mousemovement
  reset_image = (e) ->
    clearTimeout timeout
    timeout := setTimeout create_image, delay

    # store the new current mouse position
    x := e.clientX
    y := e.clientY

  create_image = ~>
    l.classList.add \dark
    l.appendChild do
      kup \img {id: \imgpreview alt: "Loading...", src, width, height } ->
        @on \load -> @removeAttribute \alt
        @on \error -> @alt = "Unable to load image."

        @css do
          position: \absolute
          top: "#{10 + (docheight - height) / 2}px"
          left: "#{10 + (docwidth - width) / 2}px"

    this.classList.add \hovered-img

    # swap creation with destruction
    listen this
      .off \mousemove reset_image
      .on \mousemove remove_image

  remove_image = ({clientX: cx, clientY: cy}) ->
    if Math.abs(x - cx) > dead_zone or Math.abs(y - cy) > dead_zone
      l.classList.remove \dark
      this.classList.remove \hovered-img
      $ \imgpreview ?.remove!

      # restart tooltip timeout
      timeout := setTimeout create_image, delay
      listen this
        .on \mousemove reset_image
        .off \mousemove remove_image

  # start initial timeout
  timeout = setTimeout create_image, delay

  # add handlers
  listen this
    .on \mousemove reset_image
    .on \mouseout function destroy
      $ \imgpreview ?.remove!
      clearTimeout timeout # stop image from appearing
      l.classList.remove \dark
      listen this
        .off \mouseout destroy
        .off \mousemove reset_image
        .off \mousemove remove_image
