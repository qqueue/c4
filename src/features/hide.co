# hide posts
# TODO refactor stub functionality out of CSS
# can then add things like 'hide similar' 'hide replies' etc

# grab or start persisted hidden hash
hidden = get \hidden or { posts: {}, threads: {} }
# delete expired posts to keep object small
for key, hash in hidden
	for key, expiry in hash
		delete hidden[key] if expiry < Date.now!

toggle = -> 
	# set class on referencing links
	# TODO somehow persist this with dynamically loaded content
	for link of $$ "a.quotelink[href=\"##it\"]" 
		link.classList.toggle \hiddenlink
	$ it .classList.toggle \hidden

<- onready

listen $ \threads
	.on \click \button.hide !->
		toggle @value
		if hidden.posts[@value]
			delete hidden.posts[@value]
		else
			hidden.posts[@value] = Date.now! + 604800000ms # 1 week
	.on \click '.op button.hide' !->
		thread = "thread-#{@value}"
		toggle thread
		if hidden.threads[thread]
			delete hidden.threads[thread]
		else
			# use Thread hash to always persist sticky threads
			hidden.threads[thread] = if Thread[@value]?sticky
				Number.MAX_VALUE
			else
				Date.now! + 604800000ms # otherwise, a week should be enough

# hide all previously hidden posts and threads
# TODO do this at render time instead of post render for faster display
for post of document.getElementsByClassName \post
	toggle post.id if hidden.posts[post.id]
for thread of document.getElementsByClassName \thread
	toggle thread.id if hidden.threads[thread.id]

# persist hidden
listen window .on \unload -> set \hidden, hidden

