# youtube embedding and title fetching

{onready, onpostinsert} = require \../utils/features
{L, $, $$} = require \../utils/dom
{truncate} = require \../utils/string
{defer, debounce} = require \../utils/timing
{sget, sset} = require \../utils/storage

const api-key = "AIzaSyCe5gXUv-EFyNMoESO8ONZnottbsd-2ayA"
const batch-size = 30
const rate = 5000ms # time between requests

request-queue = []
ready = true
queue = !(req) ->
  request-queue.push req

  req.addEventListener \loadend !->
    request-queue.shift! # remove self

    defer rate, !->
      if request-queue.0 # there are more
        that.send!
      else
        ready := true
  if ready
    ready := false
    req.send!

# video information cache, persisted to session storage, since batching of
# requests to the youtube API breaks the browser's internal caching with
# changing querystrings
cache = sget \youtube or {}

window.addEventListener \unload !-> sset \youtube cache

set-title = !(vid, data) ->
  vid.title = "#{data.statistics.viewCount} views.
                 \n\n
               #{truncate data.snippet.description, 200}"
  vid.dataset.title = data.snippet.title

# post insert adds any found videos to this, which is flushed by load-info
pending-videos = []

# these videos are in the request queue to be loaded, to prevent a video from
# being requested twice
queued-videos = {}

# unique by ids
var to-fetch

# adds click handler, and sets cached data, or adds vid to fetch pending.
# batch-requests is called debounced
# XXX needs better rewrite, not hack
load-info = !->
  to-fetch := {}

  for vid of pending-videos
    vid.addEventListener \click onclick
    if cache[vid.dataset.id]
      set-title vid, that
    else if not queued-videos[vid.dataset.id]
      to-fetch[vid.dataset.id] = true

  pending-videos := []

  batch-requests!

# debounced so postinsert on updates can be called without sending out one
# request per video
batch-requests = debounce 1000ms !->
  batches = []
  batch = []
  for id in to-fetch
    queued-videos[id] = true
    batch.push id
    if batch.length is batch-size
      batches.push batch
      batch = []
  batches.push batch

  for batch of batches
    if batch.length > 0
      let req = new XMLHttpRequest
        req.open \GET "https://www.googleapis.com/youtube/v3/videos
                    ?id=#{encodeURIComponent batch}
                    &part=snippet%2C+statistics
                    &fields=items(id%2Csnippet%2Cstatistics)
                    &key=#{api-key}"
        req.addEventListener \load !->
          if 200 <= @status < 400
            data = JSON.parse @response
            for v of data.items
              cache[v.id] = v

              for vid of $$ ".youtube[data-id=\"#{v.id}\"]"
                set-title vid, v

            # set title for videos without returned info
            for v of batch
              if not cache[v.id]
                for $$ ".youtube[data-id=\"#{v.id}\"]"
                  &dataset.title = "[Error Fetching Title]"
                  &title = "Sorry, this video might have been removed or blocked."
          else
            console.error "error fetching youtube info!" this

        req.addEventListener \error !->
          console.error "what happen" this

        req.addEventListener \loadend !->
          # remove queued flag from videos whether they were successful or not
          for v of batch
            delete queued-videos[v]

        queue req

# embed iframes
# TODO add close button somehow
onclick = !(e) ->
  unless e.altKey or e.ctrlKey or e.shiftKey or e.metaKey
    e.preventDefault!
    @replace with L \iframe
      &width = 560
      &height = 315
      &src = "//www.youtube.com/embed/#{@dataset.id}
             ?#{@dataset.params or ''}
             &amp;autoplay=1
             &amp;wmode=transparent"
      &frameborder = 0
      &allowfullscreen = ''

onready !->
  # initial vids
  pending-videos.push ...$$ \.youtube
  load-info!

  # then on updates
  onpostinsert !->
    pending-videos.push ...@post.querySelectorAll \.youtube
    load-info!

