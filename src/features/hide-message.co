# global message functionality ot free up vertical space after it's been read
#
# Concerns:
#
# - Toggle message display with a button
#   - Toggle button text should reflect display state
# - Persist message display state between sessions
# - Show _new_ messages regardless of previous message display state
#
# Uses 4chan-JS's localStorage location so catalog page's global message will
# also be hidden

{onready} = require \../utils/features
{set, get} = require \../utils/storage
{$} = require \../utils/dom

# 4chanJS's hash function, line 80-86
function hash str
  msg = 0
  for i til str.length
    msg = ((msg << 5) - msg) + str.charCodeAt i

  return msg

# bacon.js-alike implementation, for kicks, until browserification
class Observable
  ->
    @callbacks = []

  emit: (event) ->
    for @callbacks
      & event

  # onValue in bacon, but each makes more sense with `map` and others, and is
  # more like clojure's `doseq`
  each: -> @callbacks.push it

  map: (fn) ->
    with new EventStream
      @each ->
        &emit fn it

  scan: (seed, reduce) ->
    with new Property seed
      @each -> &emit reduce &value, it

class EventStream extends Observable
  -> super ...

  ..from-events = (el, event) ->
    with new EventStream
      el.addEventListener event, &~emit

class Property extends Observable
  (@value) ->
    super ...

  emit: (val) ->
    @value = val
    super ...

  # properties map to new properties
  map: (fn) ->
    with new Property fn @value
      @each -> &emit fn it

  assign: (obj, property) ->
    asn = !-> obj[property] = it
    @each asn

    # initialize if necessary
    asn that if @value?

<-! onready

if $ \message-container
  button  = $ \hide-message
  message = $ \message

  # per 4chan-JS, the old hash only exists when the message is hidden
  # toString! since localStorage only stores strings, which makes coco's strict
  # equality fail
  new-hash = hash message.textContent .toString!
  console.log new-hash
  if new-hash is not localStorage\4chan-msg
    localStorage.removeItem \4chan-msg

  message.hidden = localStorage[\4chan-msg]?

  # toggle concern
  message-hidden = EventStream.from-events button, \click
    .scan message.hidden, -> not it

  message-hidden.assign message, \hidden
  message-hidden.each !->
    if it
      localStorage\4chan-msg = new-hash
    else
      localStorage.removeItem \4chan-msg

  # button text concern
  message-hidden
    .map -> "#{if it then "Show" else "Hide"} News"
    .assign button, \textContent

