{L} = require \./utils/dom
parser = require \./parser
onready = require \./utils/features
{truncate} = require \./utils/string

# pre-create new DOM
html = L \html
  &appendChild with head = L \head
    &appendChild L \title
    &appendChild with L \style
      &id = \html5chan-style
      &textContent =
        '''
        %hakase.css%
        '''
    &appendChild with L \script
      &src = '//www.google.com/recaptcha/api/challenge?
              k=6Ldp2bsSAAAAAAJ5uyx_lx34lJeEpTLVkP5k04qc'
      &addEventListener \load !->
        head.appendChild with L \script
          &src = \//www.google.com/recaptcha/api/js/recaptcha.js
          &addEventListener \load !->
            L \script
              &textContent =
                # secret secrets, gained from digging around in the recaptcha js
                "(function() {
                  var c;
                  if (c = document.getElementById('captcha')) {
                    Recaptcha._init_options({
                      theme: 'custom',
                      custom_theme_widget: c
                    });
                    Recaptcha.theme = 'custom';
                    Recaptcha.widget = c;
                    Recaptcha._finish_widget();
                  }
                 }())"
              if board.ready
                head.appendChild &
              else
                onready !-> head.appendChild &

  &appendChild body = L \body

# replace the original html with the new, but keep a reference to query and
# parse. This speeds up re-rendering consideraby, since the browser doesn't
# even have to attempt displaying the old content and style.
#
# in fact, it's so effective, even the original sript tags don't run, EVEN ON
# CHROME, negating the need to handle 'beforescriptexeute' or whatever. crazy.
d = document.replaceChild html, document.documentElement

# init
<-! document.addEventListener \DOMContentLoaded

console.time "initial render"

console.time "parse page"
# get other useful information
board
  &title    = d.querySelector \.boardTitle .textContent

  &subtitle = d.querySelector \.boardSubtitle ?.innerHTML or ''
  &nav      = d.querySelector \#boardNavDesktop .innerHTML
  &banner   = d.querySelector \.title .src
  &motd     = d.querySelector \.globalMessage ?.innerHTML

  # detect based on favicon href
  &sfw =
    d.querySelector 'link[rel="shortcut icon"]' .href.slice(-6) is \ws.ico

  &type = if &sfw then \sfw else \nsfw
  &favicon = board.favicons[&type]

  # for post deletion
  &password = get \password or Math.random!toString!substr -8

console.timeEnd "parse page"

console.log board

if board.isThread then
  board.thread = thread = parser.thread d
  board.threads = threads = [thread] # for rendering conformity
else
  board.threads = threads = parser.board d

console.log threads

# XXX clear out backlinks, coupled
Post.new-backlinks = {}

body
  &id = board.name
  &className = "#{board.type} \
               #{if board.isThread then \threadpage else \boardpage}"

console.time "generate new HTML body"
body-html =
  """
  %board.co.html%
  """
console.timeEnd "generate new HTML body"

console.time "parse and render new body"
body.innerHTML = body-html
console.timeEnd "parse and render new body"

if board.isBoard
  console.time "highlight current page"
  body.querySelector "\#pages a[href=\"#{board.page or board.url}\"]"
    .id = \current
  console.timeEnd "highlight current page"

console.time "set new page title"
document.title =
  if board.isThread
    board.thread.op |>
      "#{truncate do
           &subject or &text or &image?filename or &time.relative-date!}
       \ - /#{board.name}/"
  else
    board.title
console.timeEnd "set new page title"

console.time "set correct favicon"
document.head.append with L \link
  &id   = \favicon
  &rel  = \icon
  &type = \image/x-icon # required for chrome, I guess
  &href = board.favicon.src
console.timeEnd "set correct favicon"

console.timeEnd "initial render"

# rescroll to target element if this page hasn't been scrolled before
# this retains the browser's natural scroll position memory
# while still scrolling to the new hash target's position
# the first time the page loads (or if window hasn't been scrolled)
# TODO I don't know if this is necessary any more
if window.location.hash and not sget document.URL
  window.location.hash = window.location.hash
  window.addEventListener \scroll function registerPage
    sset {+(document.URL)}
    window.removeEventListener \scroll registerPage

console.time "initial post insertion handlers"

for post of $$ \.post
  document.dispatchEvent new CustomEvent do
    \html5chan-postinsert
    detail: {post}

console.timeEnd "initial post insertion handlers"

board.ready = true

document.dispatchEvent new CustomEvent do
  \html5chan-ready
  detail: {post}

