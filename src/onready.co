# pre-create new DOM
html = document.createElement \html

head = document.createElement \head
head.appendChild document.createElement \title
style = document.createElement \style
  &id = \html5chan-style
  &textContent =
    '''
    %hakase.css%
    '''
head.appendChild style

# because the original scripts on the page no longer run, recreate the useful
# ones here.
recaptcha = document.createElement \script
  &src = '//www.google.com/recaptcha/api/challenge?
          k=6Ldp2bsSAAAAAAJ5uyx_lx34lJeEpTLVkP5k04qc'
  &addEventListener \load !->
    recaptcha = document.createElement \script
      &src = \//www.google.com/recaptcha/api/js/recaptcha.js
      &addEventListener \load ->
        recaptcha = document.createElement \script
          &textContent =
            # secret secrets, gained from digging around in the recaptcha js
            "(function() {
              var c;
              if (c = document.getElementById('captcha')) {
                Recaptcha._init_options({
                  theme: 'custom',
                  custom_theme_widget: c
                });
                Recaptcha.theme = 'custom';
                Recaptcha.widget = c;
                Recaptcha._finish_widget();
              }
             }())"
        onready !-> head.appendChild recaptcha
    head.appendChild recaptcha
head.appendChild recaptcha

html.appendChild head

body = document.createElement \body

html.appendChild body

# replace the original html with the new, but keep a reference to query and
# parse. This speeds up re-rendering consideraby, since the browser doesn't
# even have to attempt displaying the old content and style.
#
# in fact, it's so effective, even the original sript tags don't run, EVEN ON
# CHROME, negating the need to handle 'beforescriptexeute' or whatever. crazy.
d = document.replaceChild html, document.documentElement

# init
<-! document.addEventListener \DOMContentLoaded

console.time "render"

console.time "parse page"
# get other useful information
board
  &title    = d.querySelector \.boardTitle .textContent

  &subtitle = d.querySelector \.boardSubtitle ?.innerHTML or ''
  &nav      = d.querySelector \#boardNavDesktop .innerHTML
  &banner   = d.querySelector \.title .src
  &motd     = d.querySelector \.globalMessage ?.innerHTML

  # detect based on favicon href
  &sfw =
    d.querySelector 'link[rel="shortcut icon"]' .href.slice(-6) is \ws.ico

  &type = if &sfw then \sfw else \nsfw

  # for post deletion
  &password = get \password or Math.random!toString!substr -8

console.timeEnd "parse page"

console.log board

if board.isThread then
  board.thread = thread = parser.thread d
  board.threads = threads = [thread] # for rendering conformity
else
  board.threads = threads = parser.board d

console.log threads

body
  &id = board.name
  &className = "#{board.type} \
               #{if board.isThread then \threadpage else \boardpage}"

console.time "parse innerHTML"
body.innerHTML =
  """
  %board.co.html%
  """
console.timeEnd "parse innerHTML"

#highlight current page
if board.isBoard
  body.querySelector "\#pages a[href=\"#{board.page or board.url}\"]"
    .id = \current

document.title =
  if board.isThread
    board.thread.op
      "#{truncate do
           &title or
           "#{if &poster is not \Anonymous then "#that - " else ''}
            #{&text or &image?filename or &time.relative_time!}"}
       \ - /#{board.name}/"
  else
    board.title

# rescroll to target element if this page hasn't been scrolled before
# this retains the browser's natural scroll position memory
# while still scrolling to the new hash target's position
# the first time the page loads (or if window hasn't been scrolled)
# TODO I don't know if this is necessary any more
if window.location.hash and not sget document.URL
  window.location.hash = window.location.hash
  window.addEventListener \scroll function registerPage
    sset {+(document.URL)}
    window.removeEventListener \scroll registerPage

console.timeEnd "render"

console.time "onready handlers"

document.dispatchEvent new CustomEvent do
  \html5chan-loaded
  detail: {thread, threads}

