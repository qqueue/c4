# pre-create new DOM
html = document.createElement \html

head = document.createElement \head
style = document.createElement \style
  &id = \html5chan-style
  &textContent =
    '''
    %hakase.css%
    '''
head.appendChild style

# because the original scripts on the page no longer run, recreate the useful
# ones here.
recaptcha = document.createElement \script
  &src = '//www.google.com/recaptcha/api/challenge?
          k=6Ldp2bsSAAAAAAJ5uyx_lx34lJeEpTLVkP5k04qc'
  &addEventListener \load ->
    recaptcha = document.createElement \script
      &src = \//www.google.com/recaptcha/api/js/recaptcha.js
    &addEventListener \load ->
      recaptcha = document.createElement \script
        &textContent =
          # secret secrets, gained from digging around in the recaptcha js
          "(function() {
            var c;
            if (c = document.getElementById('captcha')) {
              Recaptcha._init_options({
                theme: 'custom',
                custom_theme_widget: c
              });
              Recaptcha.theme = 'custom';
              Recaptcha.widget = c;
              Recaptcha._finish_widget();
            }
           }())"
      # this check is needed since the firefox loads the script before
      # DOMContentLoaded, which causes it to fail (no captcha element), while
      # chrome, since the script cannot run before DOMContentLoaded, is already
      # in 'interactive' ready state, and a DOMContentLoaded listener added
      # after it happens will never fire.
      if document.readyState is \interactive
        head.appendChild recaptcha
      else
        document.addEventListener \DOMContentLoaded ->
          head.appendChild recaptcha
    head.appendChild recaptcha
head.appendChild recaptcha

#
# inject captcha
if $ \captcha
  document.createElement \script
    head.appendChild(&)

html.appendChild head

body = document.createElement \body

html.appendChild body

# replace the original html with the new, but keep a reference to query and
# parse. This speeds up re-rendering consideraby, since the browser doesn't
# even have to attempt displaying the old content and style.
#
# in fact, it's so effective, even the original sript tags don't run, EVEN ON
# CHROME, negating the need to handle 'beforescriptexeute' or whatever. crazy.
d = document.replaceChild html, document.documentElement

# init
<-! document.addEventListener \DOMContentLoaded

time "render"

time "parse page"
# get other useful information
board
  &title =
    d.querySelector \.boardTitle .textContent
  &subtitle =
    d.querySelector \.boardSubtitle ?.innerHTML or ''

  # detect based on favicon href
  &sfw = d.querySelector 'link[rel="shortcut icon"]'
    .href.slice -6 is \ws.ico

  # set equivalent base64-encoded version
  &favicon = if &sfw then titler.favicon.sfw else titler.favicon.nsfw

  &nav = d.querySelector \#boardNavDesktop .innerHTML
  &banner = d.querySelector \.title .src

  &motd = document.querySelector \.globalMessage ?.innerHTML
  &url = "//boards.4chan.org/#{&name}/"
  &threadurl = "#{&url}res/"

  if document.location.pathname.match /res\/(\d+)/
    &isThread = true
    &threadId = that.1
    &threadPath = "/#{&name}/res/#{&threadId}"
  else
    &isThread = false
    &page = parseInt (&page), 10 or 0 if &page

  &isBoard = !&isThread

  # delete password
  &password = get \password or Math.random!toString!substr -8

timeEnd "parse page"

if board.isThread then
  thread = parser.thread d
  threads = [thread] # for rendering conformity
else
  threads = parser.board d

console.log threads

# replace documentElement with new document element to avoid multiple reflows
# of removing old styles, adding new content, etc
#
# not using my DOM creation helper because it's slower, and speed is of the
# essence here (also no $ shortcut)

body
  &id = board.name
  &className = "#{if board.sfw then \sfw else \nsfw} \
               #{if board.isThread then \threadpage else \boardpage}"

time "parse innerHTML"
body.innerHTML =
  """
  %board.co.html%
  """
timeEnd "parse innerHTML"

#highlight current page
if board.isBoard
  body.querySelector "\#pages a[href=\"#{board.page or board.url}\"]"
    .id = \current

# disable 4chan's onload functions
window.onload = window.onunload = void

# rescroll to target element if this page hasn't been scrolled before
# this retains the browser's natural scroll position memory
# while still scrolling to the new hash target's position
# the first time the page loads (or if window hasn't been scrolled
# TODO fix hash discrepency with vanilla 4chan
if window.location.hash and not sget document.URL
  window.location.hash = window.location.hash
  window.addEventListener \scroll function registerPage
    sset {+(document.URL)}
    window.removeEventListener \scroll registerPage


timeEnd "render"

# run other onready handlers
onready.execute thread, threads

