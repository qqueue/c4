# the fancy new fountain-inspired updater.
# Instead of having each thread page poll for updates, have a single shared
# worker poll `threads.json` for each open board, thus multiplexing updates
# between many open threads.
#
# While we _could_ poll `catalog.json` like fountain does,
# it's a pretty heavy-weight request (~300KB raw, ~100KB gzipped)
# compared to `threads.json` (~6KB raw, ~1KB gzipped). While it'd
# save us requests to each updated `res/<no>.json` to actually
# pick up the new posts, I think `catalog.json` would use a lot more
# bandwidth in aggregate.
#
# (Once I work on fountain again, this updater could just connect to that
# and use even less bandwidth. soonâ„¢)
#
# The implementation of this isn't as straightforward as I'd like due to
# a cascading sequence of circumstances:
#
# - Normally SharedWorkers are loaded from a separate javascript file.
#   In Greasemonkey, we only get one file, so we must load the script
#   from either a Blob URL or a data URL.
# - A SharedWorker is shared by multiple tabs if it uses the same URL.
#   That means we have to use a Data URL instead of a Blob URL.
# - XHRs within the worker use the origin of their file, _not_ the orign
#   of the spawning tab. The XHRs come from an origin of "null", which
#   means we can't actually make XHR requests to a.4cdn.org.
# - Thus, the SharedWorker calls into an active tab to make its XHR
#   requests, which are expected to return the response back into the worker.
#

worker-code = !->
  const INTERVAL = 5000ms
  board-lm = {} # board-name -> ISO time string
  to-poll = {} # board-name -> {(thread-no): {
               #                  last-modified: timestamp in seconds,
               #                  ports: [port] registered ports}}

  ports-to-last-seen = new Map

  function active-port
    ports-to-last-seen.entries!next!value?0

  !function log
    active-port!?postMessage do
      type: \log
      args: JSON.parse(JSON.stringify(Array.prototype.slice.call(arguments)))

  active-requests = new Map # url -> callback
  !function make-xhr url, if-modified-since, cb
    # if there isn't an active port, then the worker will die anyway
    port = active-port!
    active-requests.set url, cb
    port.postMessage do
      type: \xhr
      url: url
      if-modified-since: if-modified-since

    # timeout if tab takes to too long to respond
    # TODO better error handling
    set-timeout do
      ->
        if active-requests.has url
          active-requests.delete url
          cb "xhr timeout", void
      5000

  self.onconnect = !->
    port = it.ports.0
    port.start!

    ports-to-last-seen.set port, Date.now!
    port.onmessage = !->
      log "#{it.data.type} in worker", it.data if it.data.type is not \pong
      ports-to-last-seen.set port, Date.now!
      switch it.data.type
      case \register
        {board-name, thread-no, last-modified ? new Date(0)} = it.data
        board-lm[board-name] = new Date 0
        state = to-poll@[board-name][thread-no] ?=
          last-modified: last-modified
          ports: new Set

        state.ports.add port
      case \xhr
        {url, err, res} = it.data
        if active-requests.has url
          cb = active-requests.get url
          cb err, res
          active-requests.delete url
      case \bye
        ports-to-last-seen.delete port
        cleanup-port port
        log 'port went byebye'
      case \deregister
        {board-name, thread-no} = it.data
        state = to-poll@[board-name][thread-no]
        if state?
          state.ports.remove port
          if state.ports.size is 0
            delete to-poll[board-name][thread-no]

  !function cleanup-port port
    for board-name, thread-states in to-poll
      for thread-no, state in thread-states
        if state.ports.has port
          state.ports.delete port
          if state.ports.size is 0
            log "nothing watching thread #{thread-no}, deleting"
            delete thread-states[thread-no]

    for board-name, thread-states in to-poll
      if Object.keys(thread-states).length is 0
        log "nothing watching board #{board-name}, deleting"
        delete to-poll[board-name]

  !function cleanup
    ports-to-last-seen.forEach !(last-seen, port) ->
      if (Date.now! - last-seen) > (INTERVAL * 2)
        # assume tab has closed, cleanup
        log "cleaning up a port"
        ports-to-last-seen.delete port
        cleanup-port port
      else
        # apparently active, expect a timely pong back
        port.postMessage type: \ping

  throttled = new Set
  poll = !->
    cleanup!
    for let board-name, thread-states in to-poll
      return if throttled.has board-name
      throttled.add board-name
      url = "//a.4cdn.org/#{board-name}/threads.json"
      ims = board-lm[board-name].toISOString()
      make-xhr url, ims, !(err, res) ->
        log err if err
        set-timeout do
          !-> throttled.delete board-name
          INTERVAL

        if res?
          log "actually got board #board-name"
          last-modified = res.last-modified
          if last-modified > board-lm[board-name]
            board-lm[board-name] = last-modified

            # assume all threads are dead first
            dead-threads = new Set Object.keys thread-states
            log 'to-check', dead-threads
            to-update = new Set

            #[{page:..., threads: [{no:..., last_modified: ...}, ...}, ...]
            for page of JSON.parse res.body
              for thread of page.threads
                if thread.no in thread-states
                  known = thread-states[thread.no]last-modified
                  got = new Date thread.last_modified * 1000
                  log "found #{thread.no}, known: #known, got: #{got}"
                  dead-threads.delete "#{thread.no}"
                  if got > known
                    log "going to update #{thread.no}"
                    to-update.add thread.no

            log 'apparently dead', dead-threads

            dead-threads.forEach !->
              for port of thread-states[it]ports
                port.postMessage do
                  type: \dead
                  board: board-name
                  tno: it

              delete thread-states[it]

            to-update.forEach !->
              get-thread board-name, it

  active = new Set
  get-thread = !(board-name, thread-no) ->
    thread-states = to-poll[board-name]
    key = "#board-name#thread-no"
    log "getting #key ", to-poll
    return if active.has key
    active.add key

    url = "//a.4cdn.org/#{board-name}/res/#{thread-no}.json"
    ims = thread-states[thread-no]last-modified.toISOString!
    make-xhr url, ims, !(err, res) ->
      log err if err
      set-timeout do
        !-> active.delete key
        INTERVAL

      if res?
        log "got thread #key"
        if res.status is 404
          log "it's dead #{res.status}"
          for port of thread-states[thread-no]ports
            port.postMessage do
              type: \dead
              board: board-name
              tno: thread-no
          delete thread-states[thread-no]
        else
          last-modified = res.last-modified
          known = thread-states[thread-no]last-modified
          log "#{thread-no}, known: #known, got: #last-modified"
          if last-modified > known
            thread-states[thread-no]last-modified = last-modified

            thread = JSON.parse res.body

            log "broadcasting thread to ports"
            thread-states[thread-no]ports.forEach !->
              log "broadcasting thread to a port"
              it.postMessage do
                type: \update
                board: board-name
                tno: thread-no
                thread: thread

  set-interval poll, INTERVAL / 2

subscriptions = new Map # callback -> "#board#tno"
                        # reversed because there's never going to be
                        # enough keys to make linear traversal expensive
var worker

!function initialize-worker
  worker := new SharedWorker do
    "data:application/javascript,#{encodeURIComponent "(#worker-code)()"}"

  worker.port.add-event-listener \message ->
    switch it.data.type
    case \ping
      worker.port.postMessage type: \pong
    case \xhr
      {url, if-modified-since} = it.data
      # make xhr for the worker
      new XMLHttpRequest
        &open \GET url
        &set-request-header \If-Modified-Since if-modified-since
        &onload = !->
          worker.port.postMessage do
            type: \xhr
            url: url
            res:
              body: @response
              status: @status
              last-modified: new Date @getResponseHeader \Last-Modified
        &onerror = !->
          console.log it
          worker.port.postMessage do
            type: \xhr
            url: url
            err: @status
        &send!
    case \update \dead
      key = it.data.board + it.data.tno
      console.log "got #{it.data.type} #key"
      console.log 'subscriptions', subscriptions
      subscriptions.for-each !(k, sub) ->
        console.log "sub #key"
        if k is key
          try
            console.log "found sub for #{it.data.type} #key"
            sub it.data
          catch
            console.error e
    case \log
      console.log.apply console, it.data.args
    default
      console.log 'from worker', it.data.type, it.data

  worker.port.start!

  window.add-event-listener \beforeunload !->
    worker.port.postMessage type: \bye

!function cleanup-worker
  worker.port.postMessage type: \bye
  worker.port.close!

# {board: string, tno: number, last-modified: maybe date}
# callback: ({type: \dead, tno: string, board: string}
#           |{type: \update, tno: string, thread: Thead, board: string})
export function subscribe {board, tno, last-modified}, callback
  initialize-worker!

  worker.port.postMessage do
    type: \register
    board-name: board
    thread-no: tno
    last-modified: last-modified

  filter = board + tno
  subscriptions.set callback, filter

  return function unsubscribe
    worker.port.postMessage do
      type: \deregister
      board-name: board
      thread-no: tno
    subscriptions.remove callback
    if subscriptions.length is 0
      cleanup-worker!
