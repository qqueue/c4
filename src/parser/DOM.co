quotelinks-of = require \./quotelinks-of

# `document` is a HTMLDocument or HTMLElement that contains the .threads div
# from 4chan's pages.
#
# `board` is a string for the name of the board, e.g. 'a'.
module.exports = (document, board) ->
  thumbs-base = "//thumbs.4chan.org/#board/thumb/"
  images-base = "//images.4chan.org/#board/src/"
  thread-url  = "//boards.4chan.org/#board/res/"

  # pre-query always-existant post elements, which should be faster than
  # individual querySelector calls
  times    =  document.querySelectorAll \.dateTime
  comments =  document.querySelectorAll \.postMessage
  names    =  document.querySelectorAll \.name
  subjects =  document.querySelectorAll \.subject

  # some elements exist on both .mobile info and .desktop info, because moot,
  # so bicrement past .mobile versions
  e-idx = 0
  b-idx = 1

  for document.querySelectorAll \.thread
    t = new DOMThread do
      &
      times
      comments
      names
      subjects
      e-idx
      b-idx
      thumbs-base
      images-base
      thread-url

    t.posts.length
      e-idx += &
      b-idx += & * 2

    t

DOMThread:: = require(\./Thread)::
!function DOMThread el, times, comments, names, subjects, e-idx, b-idx, \
                   thumbs-base, images-base, thread-url
  @no        = el.id.substring 1 # t12345
  @url       = thread-url + @no

  @omitted = if omitted = el.querySelector \.summary
    replies:
      parseInt omitted.textContent.match(/\d+(?= posts?)/), 10 or 0
    imageReplies:
      parseInt omitted.textContent.match(/\d+(?= image (?:replies|reply))/), 10 or 0

  @preview = !!omitted

  @sticky = el.querySelector(\.stickyIcon)?
  @closed = el.querySelector(\.closedIcon)?

  @op     = new DOMPost do
    this
    el.querySelector( \.op )
    0
    true
    times[b-idx]
    comments[e-idx]
    names[b-idx]
    subjects[b-idx]
    thumbs-base
    images-base
  ++e-idx
  b-idx += 2

  idx = 1 + (@omitted?replies || 0)
  @replies = for el.getElementsByClassName( \reply )
    p = new DOMPost do
      this
      &
      idx++
      false
      times[b-idx]
      comments[e-idx]
      names[b-idx]
      subjects[b-idx]
      thumbs-base
      images-base

    ++e-idx
    b-idx += 2

    p

  @postprocess!

sage-regex = /^sage$/i

DOMPost:: = require(\./Post)::
!function DOMPost thread, el, @idx, @op, time-el, comment-el, name-el, subject-el, \
                  thumbs-base, images-base
  @no  = el.id.substring 1

  @url = "#{thread.url}\#p#{@no}"

  @time = new Date parseInt(time-el.dataset.utc, 10) * 1000ms

  @subject  = subject-el.innerHTML

  @name     = name-el.innerHTML
  @tripcode = el.querySelector \.postertrip                ?.innerHTML
  @capcode  = el.querySelector \.capcode                   ?.innerHTML

  @email    = el.querySelector \.useremail ?.href.substring(7) # strip mailto=
  @sage     = sage-regex.test that if @email

  @comment  = comment-el.innerHTML

  @uid = el.querySelector \.hand ?.textContent # hand?

  img = el.querySelector \.fileThumb

  @deleted-image = img?firstElementChild.alt is "File deleted."
  @image = if img and not @deleted-image
    new FImage img, el, thumbs-base, images-base

  @quoted        = quotelinks-of @comment
  @backlinks     = []

dimension-regex = /(\d+)x(\d+)/
size-regex      = /[\d\.]+ [KM]?B/
filename-regex  = /title="([^"]+)"/
spoiler-regex   = /^Spoiler Image/

class FImage then (el, postel, thumbs-base, images-base) ->
  # use getAttribute because `href` property adds the protocol, while
  # getAttribute returns the protocolless //version (the text of the
  # actual html attribute)
  @url        = el.getAttribute \href

  info       = postel.querySelector \.fileInfo .innerHTML
  dimensions = dimension-regex.exec info
  thumb      = el.firstElementChild
  timestamp  = @url.match /\/(\d+)/ .1

  @thumb     = new DOMThumb timestamp, thumb, thumbs-base

  @width     = parseInt dimensions.1, 10
  @height    = parseInt dimensions.2, 10

  @size      = size-regex.exec thumb.alt .0
  @filename  = filename-regex.exec(info)?1
  @md5       = thumb.dataset.md5

  @spoiler  = spoiler-regex.test thumb.alt

DOMThumb:: = require(\./Thumb)::
!function DOMThumb timestamp, el, thumbs-base
  @url    = thumbs-base + "#{timestamp}s.jpg"
  # FIXME when image is spoiled, these are the spoiler image size.
  # Since 4chan doesn't expose tn_{w|h} in the HTML, will probably need
  # to clamp to 152wx151h (and 252x251 for OPs) manually if spoiled
  @width  = parseInt el.style.width, 10
  @height = parseInt el.style.height, 10
