quotelinks-of = require \./quotelinks-of

# `document` is a HTMLDocument or HTMLElement that contains the .threads div
# from 4chan's pages.
#
# `board` is a string for the name of the board, e.g. 'a'.
module.exports = (document, board) ->
  thumbs-base = "//t.4cdn.org/#board/"
  images-base = "//i.4cdn.org/#board/"
  thread-url  = "//boards.4chan.org/#board/thread/"

  # pre-query always-existant post elements, which should be faster than
  # individual querySelector calls
  times    =  document.querySelectorAll \.dateTime
  comments =  document.querySelectorAll \.postMessage
  names    =  document.querySelectorAll \.name

  # some elements exist on both .mobile info and .desktop info, because moot,
  # so bicrement past .mobile versions
  e-idx = 0
  b-idx = 1

  for document.querySelectorAll \.thread
    t = new DOMThread do
      &
      times
      comments
      names
      e-idx
      b-idx
      thumbs-base
      images-base
      thread-url

    t.posts.length
      e-idx += &
      b-idx += & * 2

    t

DOMThread:: = require(\./Thread)::
!function DOMThread el, times, comments, names, e-idx, b-idx, \
                   thumbs-base, images-base, thread-url
  @no        = el.id.substring 1 # t12345
  @url       = thread-url + @no

  @omitted = if omitted = el.querySelector \.summary
    replies:
      parseInt omitted.textContent.match(/\d+(?= replies?)/), 10 or 0
    imageReplies:
      parseInt omitted.textContent.match(/\d+(?= images??)/), 10 or 0

  @preview = !!omitted

  @sticky = el.querySelector(\.stickyIcon)?
  @closed = el.querySelector(\.closedIcon)?

  @op     = new DOMPost do
    this
    el.querySelector( \.op )
    0
    true
    times[b-idx]
    comments[e-idx]
    names[b-idx]
    thumbs-base
    images-base
  ++e-idx
  b-idx += 2

  idx = 1 + (@omitted?replies || 0)
  @replies = for el.getElementsByClassName( \reply )
    p = new DOMPost do
      this
      &
      idx++
      false
      times[b-idx]
      comments[e-idx]
      names[b-idx]
      thumbs-base
      images-base

    ++e-idx
    b-idx += 2

    p

  @postprocess!

dimension-regex = /(\d+)x(\d+)/
size-regex      = /[\d\.]+ [KM]?B/

DOMPost:: = require(\./Post)::
!function DOMPost thread, el, @idx, @op, time-el, comment-el, name-el, \
                  thumbs-base, images-base
  @no  = el.id.substring 1

  @thread-no = thread.no

  @url = "#{thread.url}\#p#{@no}"

  @time = new Date parseInt(time-el.dataset.utc, 10) * 1000ms

  @name     = name-el.innerHTML

  # 4chan does this weird ellipsis wrapping thing:
  # <span class=subject>
  #   <span title="full title">full t(...)</span>
  # </span>
  @subject  = if el.querySelector \.subject
    if title = that.firstElementChild?title
      title
    else
      that.textContent

  @tripcode = el.querySelector \.postertrip ?.innerHTML
  @capcode  = el.querySelector \.capcode    ?.innerHTML

  @comment  = comment-el.innerHTML

  @uid = el.querySelector \.hand ?.textContent # hand?

  @quotelinks    = quotelinks-of @comment, @thread-no
  @backlinks     = []

  thumb-el = el.querySelector \.fileThumb
  @deleted-image = thumb-el?firstElementChild.alt is "File deleted."
  if thumb-el and not @deleted-image
    # use getAttribute because `href` property adds the protocol, while
    # getAttribute returns the protocolless //version (the text of the
    # actual html attribute)
    @image-url       = thumb-el.getAttribute \href

    info       = thumb-el.parentNode.firstElementChild

    # the dimensions appear after the original filename, so we
    # need to match after any (\d+)x(\d+) patterns in the original filename
    #
    # The .fileText element has 'File: ' as a TextNode before the
    # link to the file, and a TextNode after with the size and dimensions,
    # so use the last child's content.
    dimensions = dimension-regex.exec info.lastChild.textContent

    thumb      = thumb-el.firstElementChild
    timestamp  = @image-url.match /\/(\d+)\./ .1

    @thumb-url    = thumbs-base + "#{timestamp}s.jpg"
    # FIXME when image is spoiled, these are the spoiler image size.
    # Since 4chan doesn't expose tn_{w|h} in the HTML, will probably need
    # to clamp to 152wx151h (and 252x251 for OPs) manually if spoiled
    @thumb-width  = parseInt el.style.width, 10
    @thumb-height = parseInt el.style.height, 10

    @image-width     = parseInt dimensions.1, 10
    @image-height    = parseInt dimensions.2, 10

    @image-size      = size-regex.exec thumb.alt .0

    @image-spoiler  = thumb-el.classList.contains \imgspoiler

    @image-filename  = if @spoiler
      info.title
    else
      a = info.querySelector 'a'
      a.title or a.text-content

    @image-md5       = thumb.dataset.md5
