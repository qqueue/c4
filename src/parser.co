parse4ChanDate = do ->
	now = new Date()
	(july = new Date()).setMonth(6)
	DSTOffset = (now.getTimezoneOffset() - july.getTimezoneOffset()) / 60
	->
		unless match = it.match /(\d{2})\/(\d{2})\/(\d{2})\(\w+\)(\d{2}):(\d{2})/
			throw "Couldn't parse date: #{date}"
		new Date do
			parseInt(match[3],10) + 2000
			parseInt(match[1],10) - 1
			parseInt(match[2],10)
			(parseInt(match[4],10) + 4 - (now.getTimezoneOffset() / 60) + DSTOffset) % 24 # 4chan is EST offset 4
			parseInt(match[5],10)

# in the context of given element
parse4chan = (context) ->
	n = 0 # counter for elements that always exist, starts at -1 for pre-incrementing
	_poster = 0 # need separate counter since capcodes are hidden in this selector
	parsePost = (thread, op, testAttr, testObj) -> 
		p = new Post do
			ids[n].name
			op
			thread
			parse4ChanDate times[n].textContent
			titles[n].textContent
			posters[_poster++].textContent
			comments[n]
			(email = true) and emails.shift().href.substring(7) if emails[0]?.parentNode[testAttr] is testObj
			imageEls.shift() and images.shift() if imageEls[0]?.parentNode[testAttr] is testObj
			!!deletedImages.shift() if deletedImages[0]?[testAttr] is testObj
			# tripcode gets wrapped in the email anchor if present
			(if tripcodes[0] and (if email? then tripcodes[0].parentNode else tripcodes[0])[testAttr] is testObj
				emails.shift() if emails[0]?[testAttr] is testObj # clear extra linkmail element
				tripcodes.shift().textContent
			)
			# capcodes are hidden within reply posters, even for ops
			posters[_poster++].textContent if /##/.test(posters[_poster]?textContent)
			# only applicable on forced anon boards
			if uids[n] and uids[n].textContent is not '(ID: Heaven)'
				uids[n].textContent.match /\(ID: ([^)]+)\)/ .1
		n++
		return p

	# ########################################################
	time "preprocess"
	# ########################################################
	if board.isThread
		opHash = '#'+board.threadId
		
		# classify op and crossthread links
		time "classify links"
		for link of context.getElementsByClassName \quotelink
			unless />>>/.test link.textContent # skip crossboard links
				if opHash is link.hash
					link.className += ' oplink'
				else if link.pathname is not board.threadPath
					link.className += ' crossthread'
		timeEnd "classify links"
	else # board page
		omittedposts = Array::slice.call context.getElementsByClassName \omittedposts
		
	time "label elements"
	numThreads = 0
	for el of context.children # our wonderful parent element
		break if el.tagName is "CENTER" # the ad at the end of the threads
		if el.tagName is "HR"
			numThreads++
			continue
		el.threadNum = numThreads # oh so horrible
	timeEnd "label elements"
	
	fileinfos = context.getElementsByClassName \filesize
	imageEls = Array::slice.call context.querySelectorAll 'img[md5]'
	images = for thumb,i of imageEls
		dimensions = fileinfos[i].innerHTML.match /(\d+)x(\d+)/
		new Image do		
			thumb:
				url: thumb.src
				width: thumb.width
				height: thumb.height
			url: thumb.parentNode.href
			
			width: parseInt dimensions[1], 10
			height: parseInt dimensions[2], 10
			
			size: thumb.alt.match(/[\d\.]+ [KM]?B/)[0]
			filename: fileinfos[i].innerHTML.match(/title="([^"]+)"/)?[1]
			md5: thumb.getAttribute 'md5'
			
			spoiler: /^Spoiler Image/.test thumb.alt
	
	ids = context.querySelectorAll 'input[value="delete"]'
	times = context.getElementsByClassName \posttime

	uids = context.getElementsByClassName \posteruid # /b/'s forced anon

	emails = Array::slice.call context.getElementsByClassName('linkmail')
	tripcodes = Array::slice.call context.getElementsByClassName('postertrip')
	deletedImages = Array::slice.call context.querySelectorAll('img[alt="File deleted."]')

	time "clean comments"
	comments = for el of context.getElementsByTagName \blockquote
		el.innerHTML
			# strip 4chan's old js-based
			.replace /onmouseover="this\.style\.color='#FFF';" onmouseout="this\.style\.color=this\.style\.backgroundColor='#000'" style="color:#000;background:#000"/g ''
			.replace /onclick="replyh1\('\d+'\);"/g ''
			 # unwrap single quote links (so inline replies aren't in greentext)
			.replace /<font class="unkfunc">(<a[^q]+quotelink[^>]+>&gt;&gt;\d+<\/a>[^<]*)<\/font>/g "$1"
			.replace /<font class="unkfunc">/g '<font class="greentext">' # unkfunc?
			.replace /([\w\.\-_\/=&;?#%:~!]{100})<br>/g '$1' # unsplits urls (probably) split at 100 characters
			# youtube thumbnails
			.replace do
				/http:\/\/(?:youtu.be\/|www.youtube.com\/watch\?v=)(\w+)([&=\w;]*)/g
				'<a href="$&" class="youtube" data-id="$1" data-params="$2" target="_blank"><img width="120" height="90" src="http://img.youtube.com/vi/$1/2.jpg"></a>'
			# specialcase linkify urls without internal parenthesis surrounded by
			# parenthesis
			.replace do
				/\((https?:\/\/)([\w\-\._~:\/#\[\]@!$'+,;]+)([\w\-\._~:\/?#\[\]@!$&'*+,;=]*)\)/g ' 
				<a class="external" href="$1$2$3" title="$1$2$3" target="_blank">[$2]</a> '
			# linkify links not preceded by a quote or double-quote (should avoid relinkifying href= urls)
			.replace do
				/([^"']|^)(https?:\/\/)([\w\-\._~:\/#\[\]\(\)@!$'+,;]+)([\w\-\._~:\/?#\[\]\(\)@!$&'*+,;=]*)/g
				'$1<a class="external" href="$2$3$4" title="$2$3$4" target="_blank">[$3]</a>'
			# specialcase linkify urls without a protocol but with a common tld
			.replace do
				/(^| )([\w\.\-]+\.(?:com|net|org)[\/\w\.\-]*)/g
				'$1<a class="external" href="http://$2" title="$2" target="_blank">[$2]</a>'

	timeEnd "clean comments"
	
	posters = context.querySelectorAll '.postername, .commentpostername'
	titles = context.querySelectorAll '.filetitle, .replytitle'
	replyEls = context.getElementsByClassName \reply

	# stickies are at the top, so we just need the number of them
	stickies = context.querySelectorAll('img[alt="sticky"]').length
	# we could probably assume locked threads are too, but we'll be safe
	closedThreads = Array::slice.call context.querySelectorAll('img[alt="closed"]')
	timeEnd "preprocess"
	# ########################################################
	time "create objects"
	# ########################################################
	threads = for i til numThreads
		new Thread ids[n].name, !board.isThread, ->
			@op = parsePost this, true, \threadNum, i
			@replies = for el of replyEls 
				if el.parentNode.parentNode.parentNode.threadNum is i # walk to table from td
					parsePost this, false, \parentNode, el 
			if closedThreads[0]?parentNode.threadNum is i
				@locked = !!closedThreads.shift()
			@sticky = !!stickies-- if stickies > 0

			if not board.isThread and omittedposts[0]?.threadNum is i
				omitted = omittedposts.shift().textContent
				@omitted =
					replies: parseInt(omitted.match(/\d+(?= posts?)/), 10) or 0
					imageReplies: parseInt(omitted.match(/\d+(?= image (?:replies|reply))/), 10) or 0
		
	timeEnd "create objects"
	# ########################################################
	# return 
	# ########################################################
	thread: threads[0] if board.isThread
	threads: threads

time "parse"
data = parse4chan document.querySelector('form[name="delform"]')
timeEnd "parse"
