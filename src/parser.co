# augments the raw api with the following:
#
# quotelinks: An array of post numbers this post quotes, as parsed by 4chan
#             into anchors. Multiple quotelinks to the same post are
#             deduplicated, i.e. this array is a set.
#
# backlinks: an array of post numbers whose posts *which are in the same
#            thread is this post*, quote this post. In other words, only
#            in-thread backlinks are listed, which is usually good enough,
#            but you should query your own backlinks if you want
#            cross-thread/board ones.
#
export api = (api) ->
  new Thread api

export class Thread then ({posts}) ->
  [op, ...replies] = @posts = posts

  @op = op <<< {
    quotelinks: quotelinks-of op.com, op.no
    backlinks: []
    idx: 0
  }

  idx = 1 + (op.omitted_posts || 0)
  @replies = for replies
    & <<< {
      quotelinks: quotelinks-of &com, op.no
      backlinks: []
      idx: idx++
    }

  @imageReplies = []

  # build post by number hash and image replies array
  @post = {(op.no): @op}
  for reply of @replies
    @imageReplies.push reply if reply.filename
    @post[reply.no] = reply

  # build backlinks arrays of posts
  for post of @posts
    for quoted of post.quotelinks
      @post[quoted].backlinks.push post.no

# This picks up all in-thread and in-board links.
regex = /<a href="(\d+)?#p(\d+)" class="quotelink">/g

# a list of post numbers that are quoted by the comment (HTML)
function quotelinks-of comment, thread-no
  # use a hash in order to dedupe quotelinks to the same post
  set = {}
  regex.lastIndex = 0
  while (match = regex.exec comment)?
    set[match.2] = true if match.1!? or match.1 == thread-no

  Object.keys set

# XXX the :prelude parsing in nephrite is totally fucked, stuff the functions
# here for now
export template-fns:
  classes: ->
    c = 'post '
    c += 'imagepost ' if it.filename
    c += 'tripcoded ' if it.trip
    if it.capcode
      c += if it.capcode is '## Admin'
        'admin '
      else 'mod '
    c += 'id ' if it.iid
    c

  humanized: (bytes) ->
    if bytes < 1024
      "#bytes B"
    else if (kbytes = Math.round bytes / 1024) < 1024
      "#kbytes KB"
    else
      "#{(kbytes / 1024)toString!substring 0 3} MB"

  thumb-url: (post) ->
    board.thumbs-base + post.tim + \s.jpg

  image-url: (post) ->
    board.images-base + post.tim + post.ext

  permalink: (post) ->
    "//boards.4chan.org/#{board.name}/thread/#{post.resto or post.no}\##{post.no}"

