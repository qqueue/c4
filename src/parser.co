dimension_regex = /(\d+)x(\d+)/
size_regex      = /[\d\.]+ [KM]?B/
filename_regex  = /title="([^"]+)"/
spoiler_regex   = /^Spoiler Image/
sage_regex      = /^sage$/i

# slow(?!) DOM querying parser
# shit, why is this so much faster, even with nested functions and
# lots of querySelector calls? Did switching to standards mode make
# dom querying faster or something? TODO test this, somehow
parse_thread = (el) -> new Thread
  &id = el.id.substring 1 # t12345
  &url = board.threadurl + &id
  &preview = true

  if omitted = el.querySelector \.summary
    &omitted =
      replies:
        parseInt(omitted.textContent.match(/\d+(?= posts?)/), 10) or 0
      imageReplies:
        parseInt(omitted.textContent.match(/\d+(?= image (?:replies|reply))/), 10) or 0

  # TODO sticky and locked

  &op = parse_post.call (&), el.querySelector( \.op )
  &op.idx = 0
  &replies = Array::map.call do
    el.getElementsByClassName( \reply )
    parse_post
    & # this for map calls

  &postprocess!

parse_post = (el, idx) ->
  thread = this

  new Post
    &idx = idx + 1
    &thread = thread
    &id = el.id.substring 1
    &url =
      if &op = el.classList.contains \op
        thread.url
      else
        "#{thread.url}\#p#{&id}"
    &time = new Date do
      parseInt( el.querySelector( \.dateTime ).dataset.utc, 10 ) * 1000ms

    &title = el.querySelector '.postInfo.desktop .subject' .textContent

    &poster = el.querySelector \.name .textContent
    &tripcode = el.querySelector \.postertrip ?.textContent
    &capcode = el.querySelector \.capcode ?.textContent

    &email = el.querySelector \.useremail ?.href.substring(7) # strip mailto:
    &sage = sage_regex.test that if &email

    &comment = parser.enhance do
      el.querySelector \.postMessage .innerHTML

    # TODO uid

    if img = el.querySelector \.fileThumb
      if img.firstElementChild.alt is "File deleted."
        &deletedImage = true
      else
        thumb = img.firstElementChild
        info = el.querySelector \.fileInfo .innerHTML
        dimensions = dimension_regex.exec info
        &image =
          thumb:
            url: thumb.src
            width: parseInt thumb.style.width, 10
            height: parseInt thumb.style.height, 10
          url: thumb.parentNode.href

          width: parseInt dimensions.1, 10
          height: parseInt dimensions.2, 10

          size: size_regex.exec thumb.alt .0
          filename: filename_regex.exec(info)?1
          md5: thumb.dataset.md5

          spoiler: spoiler_regex.test thumb.alt

    &postprocess!

export parser =
  # returns Array of threads
  board: (document) ->
    console.time "parse board"
    threads = Array::map.call do
      document.querySelectorAll \.thread
      parse_thread
    console.timeEnd "parse board"

    return threads

  thread: (document) ->
    console.time "parse thread"
    thread = parse_thread document.querySelector \.thread
    console.timeEnd "parse thread"

    return thread

  # transform API thread format to the data used here. Returns Thread.
  api: ({posts: [op]}: data) -> new Thread
    &id  = op.no
    &url = board.threadurl + op.no

    &preview = !!op.omitted_posts
    &sticky  = !!op.sticky
    &locked  = !!op.closed

    &[\op ...\replies] = data.posts.map parse-api-post, &

    &postprocess!

# TODO cross-board linking will break this
thumbs-base = "//thumbs.4chan.org/#{board.name}/thumb/"
images-base = "//images.4chan.org/#{board.name}/src/"

humanized = (bytes) ->
  if bytes < 1024
    "#bytes B"
  else if (kbytes = Math.round bytes / 1024) < 1024
    "#kbytes KB"
  else
    "#{(kbytes / 1024)toString!substring 0 3} MB"

# "this" is thread
parse-api-post = (data, i) -> new Post
  &idx      = i + 1
  &thread   = this
  &id       = data.no
  &url      = @url
  &time     = new Date data.time * 1000
  & <<< data{
    title: sub
    poster: name
    tripcode: trip
    capcode
    email
  }
  &sage     = &email is \sage
  &comment  = if data.com then parser.enhance that else ''
  &image    = if data.fsize
    thumb:
     url    : thumbs-base + data.tim + \s.jpg
     width  : data.tn_w
     height : data.tn_h

    url      : "#{images-base}#{data.tim}#{data.ext}"

    width    : data.w
    height   : data.h

    size     : humanized data.fsize
    filename : "#{data.filename}#{data.ext}"
    md5      : data.md5

    spoiler  : !!data.spoiler

  &deleted-image = !!data.filedeleted

  &postprocess!

