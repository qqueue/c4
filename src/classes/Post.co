{L} = require \../utils/dom
template = require \templates/post

module.exports = class Post
  # constructor is inlined into parser
  postprocess: ->
    # backlinker, with some fancy logic to detect new ones
    if @comment.match /&gt;&gt;\d+/g
      for link of that
        quoted = link.substring 8
        backlinks = Post.backlinks@[quoted]
        if not backlinks[@no] #it's new
          Post.new-backlinks@[quoted][@no] = true
          backlinks[@no] = true

    ..[@no] = this # register this post as having been parsed

  backlinks: (only-new, post-el) -> # renders backlinks
    html = ""
    backlinks = if only-new then Post.new-backlinks else Post.backlinks
    if backlinks[@no]
      for post in backlinks[@no]
        if board.isThread
          {idx} = Post[post]
        else
          idx = post
        html +=
          "<a href=\"\#p#post\" class=\"backlink quotelink\">Â«#idx</a> "
        if only-new
          document.dispatchEvent new CustomEvent do
            \html5chan-backlink
            detail:
              no: post
              post: post-el

    return html

  # TODO factor out image sauce links somewhere else, as the logic behind them
  # is getting more complicated (would like to switch foolz to other archivers)
  render: (container, classes = '', id) ->
    template this, container, classes, id
  element: (container, classes = '', id) ->
    wrapper = L \div
      &innerHTML = @render container, classes, id
    return wrapper.firstElementChild

  text:~ ->
    L \div |>
      &innerHTML = @comment
      &textContent

  ..backlinks = {}
  ..new-backlinks = {}
  ..tripcodes = {}
  ..uids = {}

