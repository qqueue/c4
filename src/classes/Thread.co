{L} = require \../utils/dom
template = require \templates/thread
Post = require \./Post

module.exports = class Thread
  postprocess: ->
    #convenience array including op
    @posts = [@op].concat @replies

    # XXX legacy code uses Post as a lookup for posts by no, in quasi
    # ActiveRecord fashion
    for @posts => Post[&no] = &

    @imageReplies = []

    # build reply hash and image replies array
    @reply = {}
    for reply of @replies
      @imageReplies.push reply if reply.image
      @reply[reply.no] = reply

    if Thread[@no] # if this thread has been parsed before
      @new = []
      @deleted = []
      for reply of Thread[@no].replies # old replies
        @deleted.push reply if not @reply[reply.no]
      for reply of @replies
        @new.push reply if not Thread[@no].reply[reply.no]

    Thread[@no] = this

  render: (container = \article, classes = '', id) ->
    template this, container, classes, id

  element: (container, classes, id) ->
    d = L \div
      &innerHTML = @render container, classes, id
    return d.firstElementChild

